---
- name: set pre update os_info
  set_fact:
    os_info_pre_update:
      distribution: "{{ ansible_distribution }}"
      distribution_major_version: "{{ ansible_distribution_major_version }}"
      distribution_release: "{{ ansible_distribution_release }}"
      distribution_version: "{{ ansible_distribution_version }}"

- name: current OS version information
  debug:
    msg: "{{ os_info_pre_update }}"

- name: gather the package facts
  package_facts:
  register: packages_list_pre_update

- name: packages before update
  debug:
    msg: "{{ packages_list_pre_update }}"
    verbosity: 3

- name: ensure deltarpm installed
  yum:
    name: deltarpm
    state: present
  when: ansible_distribution_major_version|int < 8

- name: check for missing updates
  yum:
    list: updates
  become: yes
  register: available_updates

- debug:
    msg: |
      {{ inventory_hostname }} has {{ available_updates.results|length }} updates available.
      {% for update in available_updates.results %}
        - {{ update.name }}-{{ update.version }}
      {% endfor %}
  when: available_updates.results is defined

- name: update packages
  yum:
    name: "{{ update_distro_packages | default('*') }}"
    exclude: "{{ update_distro_packages_excludes | join(',') }}"
    state: latest
    update_cache: yes
    skip_broken: yes
  become: yes
  ignore_errors: yes

- name: check for missing updates
  yum:
    list: updates
  become: yes
  register: available_updates

- debug:
    msg: |
      {{ inventory_hostname }} has {{ available_updates.results|length }} updates available.
      {% for update in available_updates.results %}
        - {{ update.name }}-{{ update.version }}
      {% endfor %}
  when: available_updates.results is defined

- name: gather the package facts
  package_facts:
  register: packages_list_post_update

- name: set latest installed kernel version
  set_fact:
    latest_kernel_version: "{{ packages_list_post_update.ansible_facts.packages.kernel[-1].version }}-{{ packages_list_post_update.ansible_facts.packages.kernel[-1].release }}.{{ packages_list_post_update.ansible_facts.packages.kernel[-1].arch }}"

- name: show current kernel version
  debug:
    msg: "{{ ansible_kernel }}"

- name: show installed latest kernel version
  debug:
    msg: "{{ latest_kernel_version }}"

- name: check if reboot needed
  set_fact:
    system_reboot_needed: "{{ ansible_kernel != latest_kernel_version }}"

- debug:
    msg: "Reboot needed (kernel): Current:{{ ansible_kernel }} Latest:{{ latest_kernel_version }}"
  when: system_reboot_needed | bool

- block:
    - name: reboot the system
      reboot:
        reboot_timeout: "{{ reboot_timeout }}"

    - name: gather facts after update
      setup:
        filter: ansible_distribution*

    - name: set post update os info
      set_fact:
        os_info_post_update:
          distribution: "{{ ansible_distribution }}"
          distribution_major_version: "{{ ansible_distribution_major_version }}"
          distribution_release: "{{ ansible_distribution_release }}"
          distribution_version: "{{ ansible_distribution_version }}"

    - name: OS version information after reboot
      debug:
        msg: "{{ os_info_post_update }}"
  when: update_reboot_kernel and system_reboot_needed
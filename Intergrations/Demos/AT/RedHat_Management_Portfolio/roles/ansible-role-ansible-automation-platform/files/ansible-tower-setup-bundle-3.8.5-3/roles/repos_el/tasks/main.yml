---
# Configure appropriate repositories for EL installation

- include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'     # CentOS-7
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'        # RedHat-7
        - '{{ ansible_distribution }}.yml'                                              # CentOS
        - '{{ ansible_os_family }}.yml'                                                 # RedHat
        - 'default.yml'
      paths: '../vars'

- name: 'Check that tower_package_version is set'
  fail:
    msg: 'Cannot continue: tower_package_version not defined'
  when: 'tower_package_version is not defined'

- name: Install yum repo keys
  copy:
    src: '{{ item }}'
    dest: '/etc/pki/rpm-gpg/{{ item }}'
  with_items: "{{ yum_repo_keys }}"

- name: Install yum repos that arrive via release packages
  yum:
    name: '{{ yum_repo_packages }}'
    state: present

- name: Install subscription-manager-rhsm-certificates
  yum:
    name: 'subscription-manager-rhsm-certificates'
    state: present

- name: Determine if AWS rhui repository exists
  stat:
    path: '{{ redhat_aws_rhui_repo_path }}'
  changed_when: false
  register: rhui_aws_repo

- block:
    - name: Update rh-amazon-rhui-client (RHEL EC2 only)
      yum:
        name: rh-amazon-rhui-client
        state: latest

    - name: Determine RHUI version
      command: rpm -q rh-amazon-rhui-client
      register: rhui_version_out

    - set_fact:
        redhat_aws_rhui_repos:
          - rhui-REGION-rhel-server-extras
          - rhui-REGION-rhel-server-rhscl
      when:
        - rhui_version_out.stdout is match('rh-amazon-rhui-client-2')
        - ansible_distribution_major_version == '7'

    - set_fact:
        redhat_aws_rhui_repos:
          - rhel-7-server-rhui-extras-rpms
          - rhel-server-rhui-rhscl-7-rpms
      when:
        - rhui_version_out.stdout is match('rh-amazon-rhui-client-3')
        - ansible_distribution_major_version == '7'

    - name: Enable AWS rhui repositories
      ini_file:
        dest: '/etc/yum.repos.d/redhat-rhui.repo'
        section: '{{ item  }}'
        option: enabled
        value: 1
      with_items: '{{ redhat_aws_rhui_repos }}'
  when: ansible_distribution == 'RedHat' and rhui_aws_repo.stat.exists

- name: Determine if rhui repository exists
  stat:
    path: '{{ redhat_rhui_repo_path }}'
  changed_when: false
  register: rhui_repo

- name: Enable rhui repositories
  ini_file:
    dest: '{{ redhat_rhui_repo_path }}'
    section: '{{ item }}'
    option: enabled
    value: 1
  when: ansible_distribution == 'RedHat' and rhui_repo.stat.exists
  with_items: "{{ redhat_rhui_repos }}"

- name: Determine if rhsm repository exists
  stat:
    path: '{{ redhat_rhsm_repo_path }}'
  changed_when: false
  register: rhsm_repo

- name: Determine if rhsm system cert exists
  stat:
    path: '{{ redhat_rhsm_cert_path }}'
  changed_when: false
  register: rhsm_cert

- name: Enable rhsm repositories
  command: subscription-manager repos --enable '{{ item }}'
  when: ansible_distribution == 'RedHat' and rhsm_repo.stat.exists and rhsm_cert.stat.exists
  with_items: "{{ redhat_rhsm_repos }}"

- name: Enable Automation Hub rhsm repository
  command: subscription-manager repos --enable '{{ redhat_automationhub_rhsm_repo }}'
  when:
    - ansible_distribution == 'RedHat'
    - rhsm_repo.stat.exists
    - rhsm_cert.stat.exists
    - inventory_hostname in groups['automationhub'] | default([])
    - not bundle_install | bool
  ignore_errors: true
  register: ah_rhsm_repo_enable

- name: Explain Automation Hub rhsm repository failure
  fail:
    msg: 'The {{ redhat_automationhub_rhsm_repo }} channel could not be found on this system. Please ensure this machine is registered and subscribed to Red Hat Ansible Automation Platform subscription.'
  when:
    - inventory_hostname in groups['automationhub'] | default([])
    - ah_rhsm_repo_enable.failed | default(false)
    - pulp_pkg_repo is undefined

- name: Ensure rsync is installed
  yum:
    name: rsync
  when: bundle_install | bool

- block:
    - name: Copy bundle packages to repo source directory
      synchronize:
        src: "../../../bundle/el{{ ansible_distribution_major_version }}/repos/"
        dest: "{{ bundle_install_folder }}"
        archive: yes
        compress: yes
        delete: yes
  rescue:
    - name: Remove old bundle packages source directory (legacy)
      file:
        path: "{{ bundle_install_folder }}"
        state: absent
    - name: Copy bundle packages to repo source directory (legacy)
      copy:
        src: "../../../bundle/el{{ ansible_distribution_major_version }}/repos/"
        dest: "{{ bundle_install_folder }}"
  when: bundle_install | bool

- name: Install the Tower bundle repository
  template:
    src: tower_bundle.j2
    dest: /etc/yum.repos.d/ansible-tower.repo
  when: bundle_install | bool

- name: Remove legacy rabbitmq repository
  file:
    path: /etc/yum.repos.d/rabbitmq.repo
    state: absent
  when:
    - not bundle_install | bool
    - inventory_hostname in groups['tower'] | default([])

- name: Install the Tower yum repository.
  template:
    src: yum_repo.j2
    dest: /etc/yum.repos.d/ansible-tower.repo
  register: yum_repo
  when: (not bundle_install) | bool

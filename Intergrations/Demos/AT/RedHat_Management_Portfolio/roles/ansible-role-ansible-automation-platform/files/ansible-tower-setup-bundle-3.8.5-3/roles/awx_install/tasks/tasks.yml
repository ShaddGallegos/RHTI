---
# Tasks for installing and configuring the Ansible Tower application.

- name: Ensure awx is in the nginx group
  user:
    append: yes
    name: awx
    groups: nginx

- name: Configure the Tower settings directory.
  file: path=/etc/tower state=directory owner=root group=awx mode=0755

- name: Configure the Tower socket directory.
  file: path=/var/run/tower state=directory owner=nginx group=nginx mode=2775

- name: Configure the Tower socket directory for tmpfiles.d
  template:
    src: tower.conf.j2
    dest: /etc/tmpfiles.d/tower.conf
    force: yes
    mode: '0640'
    owner: root
    group: root

- name: Configure the Tower system user's home directory.
  file: path=/var/lib/awx state=directory owner=awx group=awx mode=0755

- name: Configure the Tower system user's .ssh directory.
  file: path=/var/lib/awx/.ssh state=directory owner=awx group=awx mode=0700

- name: Configure the Tower projects directory.
  file: path=/var/lib/awx/projects state=directory owner=awx group=awx mode=0750

- name: Configure the Tower job output directory.
  file: path=/var/lib/awx/job_status state=directory owner=awx group=awx mode=0750

- name: Configure the Tower static directory.
  file: path=/var/lib/awx/public/static state=directory owner=root group=awx mode=0755 recurse=yes

- name: Add Towers `conf.d` directory.
  file: path=/etc/tower/conf.d state=directory owner=root group=awx mode=0750

- name: configure tower log directory
  file: path=/var/log/tower state=directory owner=awx group=awx mode=0750

- name: Update awx_supervisord logrotate config file
  copy:
    src: logrotate_awx_supervisord
    dest: '/etc/logrotate.d/awx_supervisord'
    owner: root
    group: root
    mode: '0644'

- name: Update hourly cron logrotate invocation
  copy:
    src: logrotate_cron.hourly
    dest: '/etc/cron.hourly/logrotate'
    owner: root
    group: root
    mode: '0744'

# Update service configuration information for the ansible-tower-service script
- name: Update ansible-tower-service configuration
  template:
    src: ansible-tower.sysconfig.j2
    dest: '/etc/sysconfig/ansible-tower'
    owner: root
    group: root
    mode: '0644'

# When running with an external database, we need to remove 'postgresql' from
# the list of tower managed services.
- name: Update ansible-tower systemd configuration
  template:
    src: ansible-tower.service.j2
    dest: '/lib/systemd/system/ansible-tower.service'
    owner: root
    group: root
    mode: '0644'

- name: Update dependent service configuration
  file:
    path: "/etc/systemd/system/{{ item }}.service.d"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"

- name: Update dependent service configuration
  copy:
    src: "{{ lookup('first_found', override) }}"
    dest: "/etc/systemd/system/{{ item }}.service.d/override.conf"
    mode: 0644
    owner: root
    group: root
  vars:
    override:
      - "files/override-{{ item }}.conf"
      - "files/override.conf"
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Enable the ansible-tower service
  service:
    name: ansible-tower
    enabled: true

- name: Check if this is a fresh installation
  stat:
    path: /var/lib/awx/.tower_version
  register: previous_install_status

- name: Replace the secret key if secret_key_override is defined and installation is new
  copy:
    content: '{{ secret_key_override }}'
    dest: '/etc/tower/SECRET_KEY'
    force: yes
    owner: 'root'
    group: 'awx'
    mode: '0640'
  when: 
    - inventory_hostname == groups['tower'][0]
    - secret_key_override is defined
    - previous_install_status.stat.exists == false
  no_log: True

- name: Fetch the secret key from the primary node.
  slurp:
    src: /etc/tower/SECRET_KEY
  when: inventory_hostname == groups['tower'][0]
  register: secret_key
  no_log: True

- name: Fail play when grabbing SECRET_KEY fails
  fail:
    msg: "Failed to read /etc/tower/SECRET_KEY from primary tower node"
  when: "hostvars[groups['tower'][0]]['secret_key'].content is not defined"

- name: Place the secret key on secondary nodes.
  copy:
    content: "{{ hostvars[groups['tower'][0]]['secret_key']['content'] | b64decode }}"
    dest: /etc/tower/SECRET_KEY
    force: yes
    mode: '0640'
    owner: root
    group: awx
  when: inventory_hostname != groups['tower'][0]
  no_log: True

- name: Get tower db settings
  shell: "awx-manage print_settings | grep '^DATABASES'"
  become_user: awx
  become: True
  register: results
  changed_when: False
  failed_when: false
  no_log: True

- name: Ingest database settings
  set_fact:
    tower_db_settings: "{{ results.stdout | regex_replace('DATABASES\\s+= ', '') }}"
  no_log: True
  when: results.rc == 0

- name: Set database vars
  set_fact:
    awx_install_pg_database__: "{{ awx_install_pg_database }}"
    awx_install_pg_username__: "{{ awx_install_pg_username }}"
    awx_install_pg_password__: "{{ awx_install_pg_password }}"
    awx_install_pg_host__: "{{ awx_install_pg_host }}"
    awx_install_pg_port__: "{{ awx_install_pg_port }}"
  no_log: True
  when: results.rc != 0

- name: Set database vars
  set_fact:
    awx_install_pg_database__: "{{ awx_install_pg_database or tower_db_settings.default.NAME }}"
    awx_install_pg_username__: "{{ awx_install_pg_username or tower_db_settings.default.USER }}"
    awx_install_pg_password__: "{{ awx_install_pg_password or tower_db_settings.default.PASSWORD }}"
    awx_install_pg_host__: "{{ awx_install_pg_host or tower_db_settings.default.HOST }}"
    awx_install_pg_port__: "{{ awx_install_pg_port or tower_db_settings.default.PORT }}"
  no_log: True
  when: results.rc == 0

- name: Configure Towers database settings.
  template:
    dest: /etc/tower/conf.d/postgres.py
    force: yes
    src: postgres.py.j2
    mode: '0640'
    owner: root
    group: awx
  register: result
  notify:
    - restart nginx
    - restart supervisor

- name: Generate broadcast websocket secret
  set_fact:
    broadcast_websocket_secret: "{{ lookup('password', '/dev/null length=128') }}"
  run_once: true
  no_log: true

- name: Configure Towers channels settings.
  template:
    dest: /etc/tower/conf.d/channels.py
    force: yes
    src: channels.py.j2
    mode: '0640'
    owner: root
    group: awx
  notify:
    - restart nginx
    - restart supervisor

- name: Configure the Insights URL
  template:
    dest: /etc/tower/conf.d/insights.py
    force: yes
    src: insights.py.j2
    mode: '0640'
    owner: root
    group: awx
  notify:
    - restart nginx
    - restart supervisor

- name: Initialize instance groups for host
  set_fact:
    awx_instance_groups: []

- name: Determine instance groups for host
  set_fact:
    awx_instance_groups: "{{ awx_instance_groups }} + [ '{{ item|regex_replace('^instance_group_','') }}' ]"
  with_items: "{{group_names}}"
  when: item is match("(^tower|^instance_group_.+)$")

- name: Remove Tower rabbitmq settings
  file:
    path: /etc/tower/conf.d/rabbitmq.py
    state: absent

- name: Configure Tower CLUSTER_HOST_ID setting
  template:
    dest: /etc/tower/conf.d/cluster_host_id.py
    force: yes
    src: cluster_host_id.py.j2
    mode: '0640'
    owner: root
    group: awx

- name: Remove Tower memcached settings
  file:
    path: /etc/tower/conf.d/caching.py
    state: absent

- name: Set default image for Container Groups
  template:
    dest: /etc/tower/conf.d/container_groups.py
    force: yes
    src: container_groups.py.j2
    mode: '0640'
    owner: root
    group: awx
  notify:
    - restart nginx
    - restart supervisor

- name: Install Tower's settings file if it doesn't already exist.
  template:
    dest: /etc/tower/settings.py
    force: yes
    backup: yes
    src: settings.py.j2
    mode: '0640'
    owner: root
    group: awx
  notify:
    - restart nginx
    - restart supervisor

- name: Stop supervisor
  service:
    name: 'supervisord'
    state: stopped

- name: Wait for supervisor to stop.
  stat:
    path: '/var/run/supervisor/supervisor.sock'
  register: result
  until: not result.stat.exists
  retries: 10
  delay: 2

- name: Migrate the Tower database schema (may take awhile when upgrading).
  command: awx-manage migrate --noinput
  become_user: awx
  become: True
  register: tower_migrate
  changed_when: "tower_migrate.stdout is defined and 'No migrations to apply' not in tower_migrate.stdout"
  when: inventory_hostname == groups['tower'][0]

- name: Checking for RBAC migration log
  stat: path=/tmp/tower_rbac_migrations.log
  register: rbac_log

- name: Moving RBAC migration log
  command: mv /tmp/tower_rbac_migrations.log /var/log/tower
  when: rbac_log.stat.exists

- name: get the tower version
  shell: awx-manage version
  become_user: awx
  become: True
  register: tower_version

- name: store the tower version
  copy:
    dest: '/var/lib/awx/.tower_version'
    owner: root
    group: root
    mode: 0644
    content: '{{ tower_version.stdout }}'
  become_user: root
  become: True

- name: Get configuration files to set permissions on
  shell: ls /etc/tower/conf.d/*.py
  register: configuration_files
  changed_when: false

- name: Clean up any poorly-permissioned Tower configuration files on upgrade
  file:
    path: "{{ item }}"
    state: file
    owner: root
    group: awx
    mode: 0640
  become_user: root
  become: True
  with_items: "{{ configuration_files.stdout_lines }} + ['/etc/tower/settings.py']"

- name: Set ACL rule for awx user to access rhsm.conf
  shell: setfacl -m u:awx:r /etc/rhsm/rhsm.conf

- name: Check for Tower Super users
  shell: echo "from django.contrib.auth.models import User; nsu = User.objects.filter(is_superuser=True).count(); exit(0 if nsu > 0 else 1)" | awx-manage shell
  register: super_check
  become_user: awx
  become: True
  ignore_errors: yes
  changed_when: super_check.rc > 0
  when: inventory_hostname == groups['tower'][0]

- name: create django super user if it does not exist
  shell: awx-manage createsuperuser --username={{ admin_username | quote }} --email={{ admin_email | quote }} --noinput
  register: result
  changed_when: "'That username is already taken' not in result.stderr"
  failed_when: "'That username is already taken' not in result.stderr and 'Superuser created successfully' not in result.stdout"
  become_user: awx
  become: True
  no_log: True
  when: inventory_hostname == groups['tower'][0] and super_check.rc > 0

- name: update django super user password
  shell: awx-manage update_password --username='{{ admin_username }}' --password='{{ awx_install_admin_password }}'
  become_user: awx
  become: True
  no_log: True
  register: result
  changed_when: "'Password updated' in result.stdout"
  when: awx_install_admin_password != '' and inventory_hostname == groups['tower'][0]

- name: Collect static files for Tower.
  shell: umask 022 && awx-manage collectstatic --noinput --clear -v0
  become_user: root
  become: True
  when: tower_package_name == "ansible-tower"
  # When using --clear, this command will *always* result in a change
  # register: awx_collectstatic
  # changed_when: "not awx_collectstatic.stdout_lines[-1].startswith('0 static files')"

- name: Fixup tower log directory permissions post-migration
  file:
    path: '/var/log/tower'
    state: 'directory'
    owner: awx
    group: awx
    recurse: true
    mode: 'u=rwX,g=rX,o-rwx'

- name: Add ansible-runner cgroup config
  blockinfile:
    path: /etc/cgconfig.conf
    owner: root
    group: root
    mode: 0644
    create: yes
    insertafter: EOF
    marker: "# <!-- {mark} ansible-runner cgroup -->"
    block: |
      group ansible-runner {
        perm {
          admin {
            uid = awx;
            gid = awx;
          }

          task {
            uid = awx;
            gid = awx;
          }
        }

        cpuacct { }
        memory { }
        pids { }
      }
  become: true

- name: Enable, start cgconfig service
  service:
    name: cgconfig
    state: restarted
    enabled: true
  become: true

- name: Copy Candlepin RHSM Certificate
  copy:
    src: "candlepin-redhat-ca.crt"
    dest: "/etc/tower/candlepin-redhat-ca.crt"
    mode: 0640
    owner: root
    group: awx

- name: Copy Eula
  copy:
    dest: /var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/api/templates/eula.md
    src: eula.md
    mode: 0640
    owner: root
    group: awx

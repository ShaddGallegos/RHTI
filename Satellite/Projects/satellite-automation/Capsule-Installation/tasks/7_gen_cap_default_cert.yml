- name: Generate Capsule Certificate | check for existing certs tarball
  stat:
    path: "/root/capsule_cert/{{ inventory_hostname }}-capsule-certs.tar"
  register: existing_tarball
  delegate_to: "{{ satellite_fqdn }}"

- name: Generate Capsule Certificate | capsule-certs-generate
  command: >-
    capsule-certs-generate --foreman-proxy-fqdn {{ inventory_hostname }}
    --certs-tar  "/root/capsule_cert/{{ inventory_hostname }}-capsule-certs.tar"
  register: cert_generate_output
  delegate_to: "{{ satellite_fqdn }}"
  throttle: 1
  when:
    - not (existing_tarball.stat.exists)

- name: grab certs from satellite
  fetch:
    src: "/root/capsule_cert/{{ inventory_hostname }}-capsule-certs.tar"
    dest: /tmp/
    flat: yes
  delegate_to: "{{ satellite_fqdn }}"
  when:
    -  not (existing_tarball.stat.exists)

- name: create certs dir on capsule
  file:
    path: "/root/capsule-certificates/{{ inventory_hostname }}"
    state: directory
  when:
    - not (existing_tarball.stat.exists)

- name: copy certs to capsule
  copy:
    src: "/tmp/{{ inventory_hostname }}-capsule-certs.tar"
    dest: "/root/capsule-certificates/{{ inventory_hostname }}/{{ inventory_hostname }}-capsule-certs.tar"
  when:
    - not (existing_tarball.stat.exists)

- name: set foreman-proxy-oauth-consumer-key fact
  set_fact:
    foreman_proxy_oauth_consumer_key: "{{ line.split('\"')[1] | regex_replace('\"','') }}"
  when:
    - not (existing_tarball.stat.exists)
    - line | regex_search('foreman-proxy-oauth-consumer-key')
  loop_control:
    loop_var: line
  throttle: 1
  with_items:
    - "{{ cert_generate_output.stdout_lines }}"

- name: set foreman-proxy-oauth-consumer-secret fact
  set_fact:
    foreman_proxy_oauth_consumer_secret: "{{ line.split('\"')[1] | regex_replace('\"','') }}"
  when:
    - not (existing_tarball.stat.exists)
    - line | regex_search('foreman-proxy-oauth-consumer-secret')
  loop_control:
    loop_var: line
  throttle: 1
  with_items:
    - "{{ cert_generate_output.stdout_lines }}"

---
- name: make sure we are running correct Ansible Version
  assert:
    that:
      - ansible_version.major >= 2
      - ansible_version.minor >= 9

- name: make sure workshop_type is set to a correct value
  assert:
    that:
      - workshop_type is defined
      - workshop_type in valid_workshop_types
    msg: "workshop_type must be defined and be one of: {{valid_workshop_types}}"

- name: make sure dns_type is set to a correct value
  assert:
    that:
      - dns_type is defined
      - dns_type in valid_dns_type
    msg: "workshop_type must be defined and be one of: {{valid_dns_type}}"

- name: make sure network_type is set to a correct value
  assert:
    that:
      - network_type is defined
      - network_type in valid_network_types
    msg: "network_type must be defined and be one of: {{valid_network_types}}"
  when: workshop_type == "networking"

- name: make sure DNS name is 65 characters or less
  vars:
    test_name: "studentXXX-code.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
  assert:
    that:
      - "{{test_name|length}} <= 65"
    msg: "you must make sure your DNS name is shorter"

- name: make sure security_console is set to a correct value
  assert:
    that:
      - security_console is defined
      - security_console in valid_security_console_types
    msg: "network_type must be defined and be one of: {{valid_security_console_types}}"
  when: workshop_type == "security"

- name: make sure we are not running with TESTWORKSHOP as the name so no overlap
  assert:
    that:
      - ec2_name_prefix != "TESTWORKSHOP"
    msg:
      - "ec2_name_prefix cannot be set to TESTWORKSHOP"
      - "please set a unique name for your workshop"

- name: make sure we are not using `ansible` as the password
  assert:
    that:
      - admin_password != "ansible"
    msg:
      - "admin_password cannot be set to ansible"
      - "please set a unique password for your workshop"

# this needs to get fixed by yanis
# - name: make sure packages required are installed on this control node
#   pip:
#     name:
#       - ansible-tower-cli
#   check_mode: true
#   register: package_state
#
# - name: fail if previous check has changed
#   assert:
#     that:
#       - package_state.changed != True

- name: auto license feature for Ansible Tower
  block:
    - name: Check that the provided license exists
      stat:
        path: "{{playbook_dir}}/tower_license.json"
      register: stat_result
    - debug:
        var: stat_result
    - fail:
        msg: "Need tower_license_data in extra_vars or a license located at {{playbook_dir}}/tower_license.json"
      when:
        - not stat_result.stat.exists
    - set_fact:
        tower_license: "{{ lookup('file',playbook_dir+'/tower_license.json')|from_json|combine({'eula_accepted':true}) }}"
  when:
    - towerinstall
    - tower_license_data is not defined

- set_fact:
    tower_license: "{{ tower_license_data|from_json|combine({'eula_accepted':true}) }}"
  when:
    - towerinstall
    - tower_license is not defined

- name: Ensure tower license is not expired
  assert:
    that: ansible_date_time.epoch|int < tower_license.license_date|int
    fail_msg: "WARNING: Ansible Tower License expired."
  ignore_errors: true
  when:
    - towerinstall

- name: install product_demos collection
  shell: "{{item}}"
  loop:
    - "ansible-galaxy collection install ansible.product_demos --force-with-deps"
    - "ansible-galaxy collection install awx.awx --force-with-deps"
  register: galaxy
  until: galaxy is not failed
  retries: 5
  when:
    - towerinstall

- name: check workshop specific information
  include_tasks: "{{item}}"
  with_first_found:
    - "{{role_path}}/tasks/{{workshop_type}}.yml"
    - "{{role_path}}/tasks/unsupported_workshop.yml"

---
# Security workshop needs a second subnet inside the VPC
- name: Create AWS VPC {{ ec2_name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block:
      - "{{ec2_subnet}}"
      - "{{ec2_subnet2}}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
  register: create_vpc
  until: create_vpc is not failed
  retries: 5

- name: create file for all AWS security group rules
  template:
    src: vpc_rules.j2
    dest: "{{playbook_dir}}/{{ec2_name_prefix}}/aws_rules.yml"
  delegate_to: localhost
  run_once: true

- include_vars:
    file: "{{playbook_dir}}/{{ec2_name_prefix}}/aws_rules.yml"

- name: Create EC2 security group for VPC named {{ ec2_name_prefix }}-vpc
  ec2_group:
    name: "{{ ec2_name_prefix }}-insecure_all"
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc.vpc.id}}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
    rules: "{{ all_rules }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: ec2_vpc_id is undefined
  register: create_sg
  until: create_sg is not failed
  retries: 5

  ### Windows Security groups
- name: Windows | Create security group
  ec2_group:
    name: "{{ ec2_name_prefix }}-windows"
    description: "Windows Workshop SG"
    vpc_id: "{{ create_vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Skylight: "This was provisioned through the skylight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5986
        to_port: 5986
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        from_port: 3389
        to_port: 3389
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        from_port: 8080
        to_port: 8081
        cidr_ip: "0.0.0.0/0"
      - proto: all
        cidr_ip: "{{ ec2_subnet }}"
  when: workshop_type == 'windows' or workshop_type == 'demo'

- name: Create subnet for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet"
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
  register: create_subnet
  when: ec2_vpc_id is undefined
  until: create_subnet is not failed
  retries: 15

- name: Create subnet2 for {{ ec2_name_prefix }}-vpc (SECURITY MODE)
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet2 }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet2"
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
  register: create_subnet2
  until: create_subnet2 is not failed
  retries: 15

- name: vpc internet gateway is present for {{ create_vpc.vpc.id }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Total {{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
  register: igw
  until: igw is not failed
  retries: 15
  when: ec2_vpc_id is undefined

- name: vpc public subnet route table is present for {{ create_vpc.vpc.id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      Workshop_type: "{{ workshop_type }}"
      Workshop: "{{ ec2_name_prefix }}"
  register: routetable
  until: routetable is not failed
  retries: 5
  when: ec2_vpc_id is undefined

- name: set variables for instance creation dynamically since VPC was not supplied by user
  set_fact:
    ec2_vpc_id: "{{ create_vpc.vpc.id }}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
    ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"
    ec2_vpc_subnet2_id: "{{ create_subnet2.subnet.id }}"

- name: s3 bucket for persistent storage of ec2 key exists
  s3_bucket:
    name: "{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone|lower }}.private"
    state: present
    region: "{{ ec2_region }}"
  retries: 4
  delay: 15
  register: s3_result
  until:
    - s3_result.failed == false

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ ec2_name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    mode: '0400'
  when: create_key.changed

- name: Store SSH Key Pair
  aws_s3:
    bucket: "{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}.private"
    mode: put
    object: "{{ec2_name_prefix}}-private.pem"
    src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    encrypt: true
    region: "{{ ec2_region }}"
  when: create_key.changed

- name: Save Private key from S3 Bucket when not generating it
  aws_s3:
    bucket: "{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}.private"
    mode: get
    object: "{{ ec2_name_prefix }}-private.pem"
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    encrypt: true
    region: "{{ ec2_region }}"
  when: not create_key.changed

- name: Ensure key file has proper permissions
  file:
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    mode: 0600

- name: debugging all variables for ec2 instance creation VPC-1
  debug:
    msg:
      - "ec2_name_prefix: {{ ec2_name_prefix }}"
      - "ec2_vpc_id: {{ ec2_vpc_id }}"
      - "{{ ec2_name_prefix }}-key: {{ ec2_name_prefix }}-key"
      - "ec2_security_group: {{ ec2_security_group }}"
      - "ec2_vpc_subnet_id: {{ ec2_vpc_subnet_id }}"
      - "ec2_vpc_subnet2_id: {{ ec2_vpc_subnet2_id }}"

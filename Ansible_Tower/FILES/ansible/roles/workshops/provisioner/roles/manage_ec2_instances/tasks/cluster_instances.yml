---
- name: Create EC2 instances for ansible node (control node)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[control_type].size }}"
    image: "{{ ansible_control_node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_ansible: "{{ ec2_name_prefix }}-ansible-{{ sequence }}"
    instance_tags:
      Workshop_ansible: "{{ ec2_name_prefix }}-ansible-{{ sequence }}"
      Workshop: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Ansible_Workshops: "This was provisioned through the ansible workshops provisioner"
      Students: "{{ student_total }}"
      username: "{{ ec2_info[control_type].username }}"
      short_name: "ansible-{{ sequence }}"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[control_type].disk_space }}"
        delete_on_termination: true
  register: control_output

- name: Ensure tags are present
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-ansible-{{ sequence }}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      dns: "{% if dns_type != 'none' %}student{{ item.0 + 1 }}.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }} {% else %} none {% endif %}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ control_output.instances }}"
  when: control_output.instance_ids is not none

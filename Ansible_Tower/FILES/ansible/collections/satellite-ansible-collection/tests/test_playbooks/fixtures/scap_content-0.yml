interactions:
- request:
    body: null
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: GET
    uri: https://foreman.example.org/api/status
  response:
    body:
      string: '{"result":"ok","status":200,"version":"1.24.2","api_version":2}'
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Length:
      - '63'
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"39b73f2292fd196be82f6d5e7da4a321"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=10000
      Server:
      - Apache
      Set-Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3; path=/; secure; HttpOnly; SameSite=Lax
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 72cbd52c-dec5-468f-b8dc-8ed6f8d6a1d2
      X-Runtime:
      - '0.234546'
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: GET
    uri: https://foreman.example.org/api/compliance/scap_contents?search=title%3D%22scap_content_title%22&per_page=4294967296
  response:
    body:
      string: "{\n  \"total\": 1,\n  \"subtotal\": 0,\n  \"page\": 1,\n  \"per_page\"\
        : 4294967296,\n  \"search\": \"title=\\\"scap_content_title\\\"\",\n  \"sort\"\
        : {\n    \"by\": null,\n    \"order\": null\n  },\n  \"results\": []\n}\n"
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"3eff9cd0204497199058b7c898c6882c-gzip"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=9999
      Server:
      - Apache
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 46a591fd-134e-47a3-b4ce-41d47f324a90
      X-Runtime:
      - '0.042372'
      X-XSS-Protection:
      - 1; mode=block
      content-length:
      - '185'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: GET
    uri: https://foreman.example.org/katello/api/organizations?search=name%3D%22Test+Organization%22&per_page=4294967296
  response:
    body:
      string: "{\n  \"total\": 2,\n  \"subtotal\": 1,\n  \"page\": 1,\n  \"per_page\"\
        : 4294967296,\n  \"search\": \"name=\\\"Test Organization\\\"\",\n  \"sort\"\
        : {\n    \"by\": null,\n    \"order\": null\n  },\n  \"results\": [{\"label\"\
        :\"Test_Organization\",\"created_at\":\"2020-03-25 13:07:14 UTC\",\"updated_at\"\
        :\"2020-03-25 13:07:14 UTC\",\"id\":24,\"name\":\"Test Organization\",\"title\"\
        :\"Test Organization\",\"description\":\"A test organization\"}]\n}\n"
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"14619f55b5c78c60995ede1ca2b07338-gzip"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=9998
      Server:
      - Apache
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 9b8565c9-00ca-4b63-92a3-de71ebd7c9e4
      X-Runtime:
      - '0.025914'
      X-XSS-Protection:
      - 1; mode=block
      content-length:
      - '389'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: GET
    uri: https://foreman.example.org/api/locations?search=title%3D%22Test+Location%22&per_page=4294967296
  response:
    body:
      string: "{\n  \"total\": 3,\n  \"subtotal\": 1,\n  \"page\": 1,\n  \"per_page\"\
        : 4294967296,\n  \"search\": \"title=\\\"Test Location\\\"\",\n  \"sort\"\
        : {\n    \"by\": null,\n    \"order\": null\n  },\n  \"results\": [{\"ancestry\"\
        :null,\"parent_id\":null,\"parent_name\":null,\"created_at\":\"2020-03-25\
        \ 13:07:18 UTC\",\"updated_at\":\"2020-03-25 13:07:18 UTC\",\"id\":25,\"name\"\
        :\"Test Location\",\"title\":\"Test Location\",\"description\":null}]\n}\n"
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"ab6c36be6286fca4e766bcc526b4634c-gzip"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=9997
      Server:
      - Apache
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 1870ac02-0538-4f1a-9d88-03193e3ae488
      X-Runtime:
      - '0.022640'
      X-XSS-Protection:
      - 1; mode=block
      content-length:
      - '385'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: GET
    uri: https://foreman.example.org/api/compliance/scap_contents?search=title%3D%22scap_content_title%22&per_page=4294967296
  response:
    body:
      string: "{\n  \"total\": 1,\n  \"subtotal\": 0,\n  \"page\": 1,\n  \"per_page\"\
        : 4294967296,\n  \"search\": \"title=\\\"scap_content_title\\\"\",\n  \"sort\"\
        : {\n    \"by\": null,\n    \"order\": null\n  },\n  \"results\": []\n}\n"
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"3eff9cd0204497199058b7c898c6882c-gzip"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=9996
      Server:
      - Apache
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 2fce67e2-a974-4741-bb1b-035b1219be71
      X-Runtime:
      - '0.017615'
      X-XSS-Protection:
      - 1; mode=block
      content-length:
      - '185'
    status:
      code: 200
      message: OK
- request:
    body: '{"scap_content": {"title": "scap_content_title", "scap_file": "<?xml version=\"1.0\"?>\n<ns0:data-stream-collection
      xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:html=\"http://www.w3.org/1999/xhtml\"
      xmlns:ns0=\"http://scap.nist.gov/schema/scap/source/1.2\" xmlns:ns1=\"http://www.w3.org/1999/xlink\"
      xmlns:ns12=\"http://cpe.mitre.org/dictionary/2.0\" xmlns:ns2=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\"
      xmlns:ns3=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\" xmlns:ns5=\"http://oval.mitre.org/XMLSchema/oval-common-5\"
      xmlns:ns6=\"http://oval.mitre.org/XMLSchema/oval-definitions-5#independent\"
      xmlns:ns7=\"http://oval.mitre.org/XMLSchema/oval-definitions-5#linux\" xmlns:ns8=\"http://scap.nist.gov/schema/ocil/2.0\"
      xmlns:ns9=\"http://checklists.nist.gov/xccdf/1.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
      id=\"scap_org.open-scap_collection_from_xccdf_ssg-firefox-xccdf-1.2.xml\" schematron-version=\"1.3\">\n  <ns0:data-stream
      id=\"scap_org.open-scap_datastream_from_xccdf_ssg-firefox-xccdf-1.2.xml\" scap-version=\"1.3\"
      use-case=\"OTHER\">\n    <ns0:dictionaries>\n      <ns0:component-ref id=\"scap_org.open-scap_cref_ssg-firefox-cpe-dictionary.xml\"
      ns1:href=\"#scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml\">\n        <ns2:catalog>\n          <ns2:uri
      name=\"ssg-firefox-cpe-oval.xml\" uri=\"#scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml\"/>\n        </ns2:catalog>\n      </ns0:component-ref>\n    </ns0:dictionaries>\n    <ns0:checklists>\n      <ns0:component-ref
      id=\"scap_org.open-scap_cref_ssg-firefox-xccdf-1.2.xml\" ns1:href=\"#scap_org.open-scap_comp_ssg-firefox-xccdf-1.2.xml\">\n        <ns2:catalog>\n          <ns2:uri
      name=\"ssg-firefox-oval.xml\" uri=\"#scap_org.open-scap_cref_ssg-firefox-oval.xml\"/>\n          <ns2:uri
      name=\"ssg-firefox-ocil.xml\" uri=\"#scap_org.open-scap_cref_ssg-firefox-ocil.xml\"/>\n        </ns2:catalog>\n      </ns0:component-ref>\n    </ns0:checklists>\n    <ns0:checks>\n      <ns0:component-ref
      id=\"scap_org.open-scap_cref_ssg-firefox-oval.xml\" ns1:href=\"#scap_org.open-scap_comp_ssg-firefox-oval.xml\"/>\n      <ns0:component-ref
      id=\"scap_org.open-scap_cref_ssg-firefox-ocil.xml\" ns1:href=\"#scap_org.open-scap_comp_ssg-firefox-ocil.xml\"/>\n      <ns0:component-ref
      id=\"scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml\" ns1:href=\"#scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml\"/>\n    </ns0:checks>\n  </ns0:data-stream>\n  <ns0:component
      id=\"scap_org.open-scap_comp_ssg-firefox-oval.xml\" timestamp=\"2020-01-16T13:55:21\">\n    <ns3:oval_definitions
      xsi:schemaLocation=\"http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5
      oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent
      independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix
      unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux
      linux-definitions-schema.xsd\">\n      <ns3:generator>\n        <ns5:product_name>combine_ovals.py
      from SCAP Security Guide</ns5:product_name>\n        <ns5:product_version>ssg:
      [0, 1, 48], python: 3.7.6</ns5:product_version>\n        <ns5:schema_version>5.11</ns5:schema_version>\n        <ns5:timestamp>2020-01-16T13:51:04</ns5:timestamp>\n      </ns3:generator>\n      <ns3:definitions>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-verification:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Enable Certificate
      Verification</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>When
      a web site asks for a certificate for user authentication, Firefox must be configured
      to have the user choose which certificate to present. Websites within DOD require
      user authentication for access which increases security for DoD information.
      Access will be denied to the user if certificate management is not configured</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-verification\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"verification installed\" test_ref=\"oval:ssg-test_firefox_preferences-verification:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-ssl_protocol_tls:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Enable TLS
      Usage in Firefox</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>DoD
      implementations of SSL must use TLS 1.0 in accordance with\n      the Network
      Infrastructure STIG.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-ssl_protocol_tls\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"TLS is enabled\" test_ref=\"oval:ssg-test_firefox_preferences-ssl_protocol_tls:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-javascript_context_menus:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable JavaScript
      Context Menus</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should be configured to not allow JavaScript to\n      disable or replace context
      menus.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-javascript_context_menus\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"disable javaScript context menus\" test_ref=\"oval:ssg-test_firefox_preferences-javascript_context_menus:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-javascript_window_changes:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable JavaScript''s
      Raise Or Lower Windows Capability</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should be configured to not allow JavaScript to\n      raise or lower windows.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-javascript_window_changes\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"raise or lower windows disabled\" test_ref=\"oval:ssg-test_firefox_preferences-javascript_window_changes:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-home_page:def:1\" version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Default
      Firefox Home Page Configured</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>The
      default homepage for Firefox is set and cannot be changed.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-home_page\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"home page configured\" test_ref=\"oval:ssg-test_firefox_preferences-home_page:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-pop-up_windows:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Enable Firefox
      Pop-up Blocker</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>The
      Firefox Pop-up blocker should be enabled as windows may be\n      used to launch
      an attack within a new browser window with altered settings.\n      </ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-pop-up_windows\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"pop-up_windows installed\" test_ref=\"oval:ssg-test_firefox_preferences-pop-up_windows:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-installed_firefox_version_supported:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Supported Version
      of Firefox Installed</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Use
      of versions of an application which are not\n      supported by the vendor are
      not permitted. Vendors respond to\n      security flaws with updates and patches.
      These updates are not\n      available for unsupported versions which can leave
      the application\n      vulnerable to attack.</ns3:description>\n            <ns3:reference
      ref_id=\"installed_firefox_version_supported\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"installed version of firefox supported\" test_ref=\"oval:ssg-test_supported_version_of_firefox:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-search_update:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Installed
      Search Plugins Update Checking</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Search
      plugins can be automatically configured to check for\n      updates. Updates
      need to be controlled and installed from authorized and\n      trusted servers.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-search_update\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Disable search plugin update capability\" test_ref=\"oval:ssg-test_firefox_preferences-search_update:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-non-secure_page_warning:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Enable Non-Secure
      Page Warnings</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      is not configured to provide warnings when a user switches\n      from a secure
      (SSL-enabled) to a non-secure page.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-non-secure_page_warning\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"non-secure page warning configured\" test_ref=\"oval:ssg-test_firefox_preferences-non-secure_page_warning:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-auto-download_actions:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Automatic
      Downloads of MIME Types</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      automatically executes or downloads MIME types which are\n      not authorized
      for auto-download.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-auto-download_actions\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Auto download actions of mime type is disabled\" test_ref=\"oval:ssg-test_firefox_preferences-auto-download_actions:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-javascript_window_resizing:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable JavaScript''s
      Moving Or Resizing Windows Capability</ns3:title>\n            <ns3:affected
      family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>FireFox
      should not be configured to allow JavaScript to move\n      or resize windows.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-javascript_window_resizing\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"move or resize windows disabled\" test_ref=\"oval:ssg-test_firefox_preferences-javascript_window_resizing:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-shell_protocol:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Firefox
      Access to Shell Protocols</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      can be configured to access systems shells which\n      could potentially allow
      Firefox and other users to access to the\n      underlying system.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-shell_protocol\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Disable Firefox Shell Protocol Access\" test_ref=\"oval:ssg-test_firefox_preferences-shell_protocol:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-password_store:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable the
      Firefox Password Store</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>The
      Firefox password store should be disabled.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-password_store\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"password_store disabled\" test_ref=\"oval:ssg-test_firefox_preferences-password_store:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-open_confirmation:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Enable Downloading
      and Opening File Confirmation</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      is not configured to prompt user before downloading and\n      opening required
      file types.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-open_confirmation\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"open_confirmation configured\" test_ref=\"oval:ssg-test_firefox_preferences-open_confirmation:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-ssl_version_3:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable SSL
      Version 3 in Firefox</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Earlier
      versions of SSL have known security vulnerabilities\n      and are not authorized
      for use in DOD.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-ssl_version_3\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"SSL V3 installed\" test_ref=\"oval:ssg-test_firefox_preferences-ssl_version_3:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-addons_plugin_updates:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Addons
      Plugin Updates</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      automatically updates installed\n      add-ons and plugins.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-addons_plugin_updates\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"addons plugin updates configured\" test_ref=\"oval:ssg-test_firefox_preferences-addons_plugin_updates:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-ssl_version_2:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable SSL
      Version 2.0 in Firefox</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>SSL
      2.0 and SSL 3.0 contain a number of security flaws.\n      Therefore, SSL 2.0
      should be disabled.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-ssl_version_2\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"SSL 2.0 protocol disabled\" test_ref=\"oval:ssg-test_firefox_preferences-ssl_version_2:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-autofill_passwords:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable User
      Ability To Autofill Passwords</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should not be configured to autofill passwords.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-autofill_passwords\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"autofill_passwords disabled\" test_ref=\"oval:ssg-test_firefox_preferences-autofill_passwords:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-javascript_status_bar_changes:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable JavaScript''s
      Ability To Change The Status Bar</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should be configured to not allow JavaScript to\n      hide or change the status
      bar.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-javascript_status_bar_changes\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"disable hiding or changing status bar menus\" test_ref=\"oval:ssg-test_firefox_preferences-javascript_status_bar_changes:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-javascript_status_bar_text:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable JavaScript''s
      Ability To Modify The Browser Appearance</ns3:title>\n            <ns3:affected
      family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should be configured not to allow JavaScript\n      to change the status bar
      text.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-javascript_status_bar_text\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"disable changing the status bar text\" test_ref=\"oval:ssg-test_firefox_preferences-javascript_status_bar_text:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-auto-update_of_firefox:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Firefox
      Auto-Update Capability</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      should not be able to automatically\n      update itself.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-auto-update_of_firefox\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"auto-update is disabled\" test_ref=\"oval:ssg-test_firefox_preferences-auto-update_of_firefox:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-autofill_forms:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable Autofill
      Form Assistance</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Firefox
      formfill assistance option is disabled.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-autofill_forms\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"autofill_forms disabled\" test_ref=\"oval:ssg-test_firefox_preferences-autofill_forms:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-cookies_clear:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Clear Cookies
      And Other Data When Firefox Closes</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Set
      browser preferences to perform a Clear Private Data\n      operation when closing
      the browser in order to clear cookies and other\n      data installed by websites
      visited during the session.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-cookies_clear\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"enabled sanitizeOnShutdown\" test_ref=\"oval:ssg-test_firefox_preferences-cookies_shutdown_sanitize:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-cookies_user_notice:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Disable User
      Prompt For Clearing Cookies And Other Data</ns3:title>\n            <ns3:affected
      family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Users
      should not be prompted about data and cookies being\n      cleared when the
      browser is closed.</ns3:description>\n            <ns3:reference ref_id=\"firefox_preferences-cookies_user_notice\"
      source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"disable promptOnSanitize\" test_ref=\"oval:ssg-test_firefox_preferences-cookies_sanitize_prompt:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-lock_settings_obscure:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Prevent Users
      from Changing Firefox Configuration Settings</ns3:title>\n            <ns3:affected
      family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Locked
      settings prevents users from accessing about:config and\n      changing the
      security settings set by the system administrator.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-lock_settings_obscure\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Do not obscure locked file content with ROT-13\" test_ref=\"oval:ssg-test_firefox_preferences-obscure_value:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"compliance\" id=\"oval:ssg-firefox_preferences-lock_settings_config_file:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Prevent Users
      from Changing Firefox Configuration Settings</ns3:title>\n            <ns3:affected
      family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>Locked
      settings prevents users from accessing about:config and\n      changing the
      security settings set by the system administrator.</ns3:description>\n            <ns3:reference
      ref_id=\"firefox_preferences-lock_settings_config_file\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Configuration file is set\" test_ref=\"oval:ssg-test_firefox_preferences-config_filename:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"inventory\" id=\"oval:ssg-installed_app_is_firefox:def:1\" version=\"2\">\n          <ns3:metadata>\n            <ns3:title>Mozilla
      Firefox</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:reference
      ref_id=\"cpe:/a:mozilla:firefox\" source=\"CPE\"/>\n            <ns3:description>The
      application installed on the system is firefox.</ns3:description>\n            <ns3:reference
      ref_id=\"installed_app_is_firefox\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria
      operator=\"AND\">\n            <ns3:extend_definition comment=\"Installed OS
      is part of the Unix family\" definition_ref=\"oval:ssg-installed_OS_is_part_of_Unix_family:def:1\"/>\n            <ns3:criterion
      comment=\"Firefox is installed\" test_ref=\"oval:ssg-test_firefox:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"inventory\" id=\"oval:ssg-installed_OS_is_part_of_Unix_family:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Installed operating
      system is part of the Unix family</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>The
      operating system installed on the system is part of the Unix OS family</ns3:description>\n            <ns3:reference
      ref_id=\"installed_OS_is_part_of_Unix_family\" source=\"ssg\"/>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Installed operating system is part of the unix family\" test_ref=\"oval:ssg-test_unix_family:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n      </ns3:definitions>\n      <ns3:tests>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Enable Certification verification\" id=\"oval:ssg-test_firefox_preferences-verification:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-verification:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check if TLS is enabled\" id=\"oval:ssg-test_firefox_preferences-ssl_protocol_tls:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-ssl_protocol_tls:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for disable javaScript context menu is disabled\"
      id=\"oval:ssg-test_firefox_preferences-javascript_context_menus:tst:1\" version=\"1\">\n          <ns6:object
      object_ref=\"oval:ssg-object_firefox_preferences-javascript_context_menus:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"raise or lower windows is disabled\" id=\"oval:ssg-test_firefox_preferences-javascript_window_changes:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-javascript_window_changes:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for home page configured\" id=\"oval:ssg-test_firefox_preferences-home_page:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-home_page:obj:1\"/>\n          <ns6:state
      state_ref=\"oval:ssg-state_firefox_preferences-home_page:ste:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for pop-up_windows installed\" id=\"oval:ssg-test_firefox_preferences-pop-up_windows:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-pop-up_windows:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns7:rpminfo_test
      check=\"all\" check_existence=\"any_exist\" comment=\"Installed version of firefox
      is greater than ESR 31.5\" id=\"oval:ssg-test_supported_version_of_firefox:tst:1\"
      version=\"1\">\n          <ns7:object object_ref=\"oval:ssg-obj_supported_version_of_firefox:obj:1\"/>\n          <ns7:state
      state_ref=\"oval:ssg-state_supported_version_of_firefox:ste:1\"/>\n        </ns7:rpminfo_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check search plugin update capability is disabled\"
      id=\"oval:ssg-test_firefox_preferences-search_update:tst:1\" version=\"1\">\n          <ns6:object
      object_ref=\"oval:ssg-object_firefox_preferences-search_update:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for non-secure page warning configured\" id=\"oval:ssg-test_firefox_preferences-non-secure_page_warning:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-non-secure_page_warning:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for Auto download Actions installed\" id=\"oval:ssg-test_firefox_preferences-auto-download_actions:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-auto-download_actions:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for move or resize windows disabled\" id=\"oval:ssg-test_firefox_preferences-javascript_window_resizing:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-javascript_window_resizing:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check that the hell_protocol is disabled\" id=\"oval:ssg-test_firefox_preferences-shell_protocol:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-shell_protocol:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check that the password_store is disabled\" id=\"oval:ssg-test_firefox_preferences-password_store:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-password_store:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for open_confirmation configured\" id=\"oval:ssg-test_firefox_preferences-open_confirmation:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-open_confirmation:obj:1\"/>\n          <ns6:state
      state_ref=\"oval:ssg-state_firefox_preferences-open_confirmation:ste:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for SSL Version 3 preferences\" id=\"oval:ssg-test_firefox_preferences-ssl_version_3:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-ssl_version_3:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for addons plugin updates\" id=\"oval:ssg-test_firefox_preferences-addons_plugin_updates:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-addons_plugin_updates:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check SSL 2.0 protocol disabled\" id=\"oval:ssg-test_firefox_preferences-ssl_version_2:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-ssl_version_2:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for autofill_passwords disabled\" id=\"oval:ssg-test_firefox_preferences-autofill_passwords:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-autofill_passwords:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check that hiding or changing status bar is disabled\"
      id=\"oval:ssg-test_firefox_preferences-javascript_status_bar_changes:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-javascript_status_bar_changes:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check that changing the status bar text is disabled\"
      id=\"oval:ssg-test_firefox_preferences-javascript_status_bar_text:tst:1\" version=\"1\">\n          <ns6:object
      object_ref=\"oval:ssg-object_firefox_preferences-javascript_status_bar_text:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check that auto-update of firefox is disabled\" id=\"oval:ssg-test_firefox_preferences-auto-update_of_firefox:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-auto-update_of_firefox:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for autofill_forms disabled\" id=\"oval:ssg-test_firefox_preferences-autofill_forms:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-autofill_forms:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for sanitizeOnShutdown enabled\" id=\"oval:ssg-test_firefox_preferences-cookies_shutdown_sanitize:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-cookies_shutdown_sanitize:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for promptOnSanitize disabled\" id=\"oval:ssg-test_firefox_preferences-cookies_sanitize_prompt:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-cookies_sanitize_prompt:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for obscure_value\" id=\"oval:ssg-test_firefox_preferences-obscure_value:tst:1\"
      version=\"1\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-obscure_value:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns6:textfilecontent54_test
      check=\"all\" comment=\"Check for configuration filename\" id=\"oval:ssg-test_firefox_preferences-config_filename:tst:1\"
      version=\"2\">\n          <ns6:object object_ref=\"oval:ssg-object_firefox_preferences-config_filename:obj:1\"/>\n        </ns6:textfilecontent54_test>\n        <ns7:rpminfo_test
      check=\"all\" check_existence=\"at_least_one_exists\" comment=\"Firefox is installed\"
      id=\"oval:ssg-test_firefox:tst:1\" version=\"1\">\n          <ns7:object object_ref=\"oval:ssg-obj_firefox:obj:1\"/>\n        </ns7:rpminfo_test>\n        <ns6:family_test
      check=\"all\" check_existence=\"at_least_one_exists\" comment=\"Test installed
      OS is part of the unix family\" id=\"oval:ssg-test_unix_family:tst:1\" version=\"1\">\n          <ns6:object
      object_ref=\"oval:ssg-object_unix_family:obj:1\"/>\n          <ns6:state state_ref=\"oval:ssg-state_unix_family:ste:1\"/>\n        </ns6:family_test>\n      </ns3:tests>\n      <ns3:objects>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-verification:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"security.default_personal_cert\",[\\s]+\"Ask
      Every Time\"\\);$</ns6:pattern>\n          <ns6:instance datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-ssl_protocol_tls:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"security.enable_tls\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-javascript_context_menus:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.event.contextmenu.enabled\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-javascript_window_changes:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.disable_window_flip\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-home_page:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"browser.startup.homepage\",[\\s]+\"(\\S+)\"\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-pop-up_windows:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.disable_window_open_feature.status\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns7:rpminfo_object
      id=\"oval:ssg-obj_supported_version_of_firefox:obj:1\" version=\"1\">\n          <ns7:name>firefox</ns7:name>\n        </ns7:rpminfo_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-search_update:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"browser.search.update\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-non-secure_page_warning:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"security.warn_leaving_secure\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-auto-download_actions:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"browser.helperApps.alwaysAsk.force\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-javascript_window_resizing:obj:1\"
      version=\"1\">\n          <ns6:path operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.disable_window_move_resize\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-shell_protocol:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"network.protocol-handler.external.shell\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-password_store:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"signon.rememberSignons\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-open_confirmation:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"plugin.disable_full_page_plugin_for_types\",[\\s]+\"(\\S+)\"\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-ssl_version_3:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"security.enable_ssl3\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-addons_plugin_updates:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"extensions.update.enabled\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-ssl_version_2:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"security.enable_ssl2\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-autofill_passwords:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"signon.prefillForms\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-javascript_status_bar_changes:obj:1\"
      version=\"1\">\n          <ns6:path operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.disable_window_status_change\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-javascript_status_bar_text:obj:1\"
      version=\"1\">\n          <ns6:path operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"dom.disable_window_open_feature.status\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-auto-update_of_firefox:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"app.update.enabled\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-autofill_forms:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"browser.formfill.enable\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-cookies_shutdown_sanitize:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"privacy.sanitize.sanitizeOnShutdown\",[\\s]+true\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-cookies_sanitize_prompt:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.cfg$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^lockPref\\(\"privacy.sanitize.promptOnSanitize\",[\\s]+false\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-obscure_value:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox\\/defaults\\/(preferences|pref)</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.js$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^pref\\(\"general.config.obscure_value\",[\\s]+0\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns6:textfilecontent54_object
      id=\"oval:ssg-object_firefox_preferences-config_filename:obj:1\" version=\"1\">\n          <ns6:path
      operation=\"pattern match\">^\\/usr\\/(|local\\/)lib(|64)\\/firefox\\/defaults\\/(preferences|pref)</ns6:path>\n          <ns6:filename
      operation=\"pattern match\">^.*\\.js$</ns6:filename>\n          <ns6:pattern
      operation=\"pattern match\">^pref\\(\"general.config.filename\",[\\s]+\"(\\S+)\\.cfg\"\\);$</ns6:pattern>\n          <ns6:instance
      datatype=\"int\">1</ns6:instance>\n        </ns6:textfilecontent54_object>\n        <ns7:rpminfo_object
      id=\"oval:ssg-obj_firefox:obj:1\" version=\"1\">\n          <ns7:name>firefox</ns7:name>\n        </ns7:rpminfo_object>\n        <ns6:family_object
      id=\"oval:ssg-object_unix_family:obj:1\" version=\"1\"/>\n      </ns3:objects>\n      <ns3:states>\n        <ns6:textfilecontent54_state
      id=\"oval:ssg-state_firefox_preferences-home_page:ste:1\" version=\"1\">\n          <ns6:subexpression
      datatype=\"string\" operation=\"equals\" var_check=\"all\" var_ref=\"oval:ssg-var_default_home_page:var:1\"/>\n        </ns6:textfilecontent54_state>\n        <ns7:rpminfo_state
      id=\"oval:ssg-state_supported_version_of_firefox:ste:1\" version=\"1\">\n          <ns7:evr
      datatype=\"evr_string\" operation=\"greater than\">3.0.0</ns7:evr>\n        </ns7:rpminfo_state>\n        <ns6:textfilecontent54_state
      id=\"oval:ssg-state_firefox_preferences-open_confirmation:ste:1\" version=\"1\">\n          <ns6:subexpression
      operation=\"equals\" var_check=\"all\" var_ref=\"oval:ssg-var_required_file_types:var:1\"/>\n        </ns6:textfilecontent54_state>\n        <ns6:family_state
      id=\"oval:ssg-state_unix_family:ste:1\" version=\"1\">\n          <ns6:family>unix</ns6:family>\n        </ns6:family_state>\n      </ns3:states>\n      <ns3:variables>\n        <ns3:external_variable
      comment=\"Expected default home page\" datatype=\"string\" id=\"oval:ssg-var_default_home_page:var:1\"
      version=\"1\"/>\n        <ns3:external_variable comment=\"Expected file types\"
      datatype=\"string\" id=\"oval:ssg-var_required_file_types:var:1\" version=\"1\"/>\n      </ns3:variables>\n    </ns3:oval_definitions>\n  </ns0:component>\n  <ns0:component
      id=\"scap_org.open-scap_comp_ssg-firefox-ocil.xml\" timestamp=\"2020-01-16T13:55:21\">\n    <ns8:ocil>\n      <ns8:generator>\n        <ns8:product_name>xccdf-create-ocil.xslt
      from SCAP Security Guide</ns8:product_name>\n        <ns8:product_version>ssg:
      0.1.48</ns8:product_version>\n        <ns8:schema_version>2.0</ns8:schema_version>\n        <ns8:timestamp>2020-01-16T00:00:00Z</ns8:timestamp>\n      </ns8:generator>\n      <ns8:questionnaires>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-home_page_ocil:questionnaire:1\">\n          <ns8:title>Default
      Firefox Home Page Configured</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-home_page_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-non-secure_page_warning_ocil:questionnaire:1\">\n          <ns8:title>Enable
      Non-Secure Page Warnings</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-non-secure_page_warning_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-ssl_version_3_ocil:questionnaire:1\">\n          <ns8:title>Disable
      SSL Version 3.0 in Firefox</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-ssl_version_3_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-password_store_ocil:questionnaire:1\">\n          <ns8:title>Disable
      the Firefox Password Store</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-password_store_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1\">\n          <ns8:title>Supported
      Version of Firefox Installed</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-installed_firefox_version_supported_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Automatic Downloads of MIME Types</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-javascript_context_menus_ocil:questionnaire:1\">\n          <ns8:title>Disable
      JavaScript Context Menus</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-javascript_context_menus_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-open_confirmation_ocil:questionnaire:1\">\n          <ns8:title>Enable
      Downloading and Opening File Confirmation</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-open_confirmation_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-verification_ocil:questionnaire:1\">\n          <ns8:title>Enable
      Certificate Verification</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-verification_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-javascript_window_resizing_ocil:questionnaire:1\">\n          <ns8:title>Disable
      JavaScript''s Moving Or Resizing Windows Capability</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-javascript_window_resizing_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-search_update_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Installed Search Plugins Update Checking</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-search_update_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-autofill_forms_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Autofill Form Assistance</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-autofill_forms_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-shell_protocol_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Firefox Access to Shell Protocols</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-shell_protocol_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-addons_plugin_updates_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Addons Plugin Updates</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-addons_plugin_updates_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-autofill_passwords_ocil:questionnaire:1\">\n          <ns8:title>Disable
      User Ability To Autofill Passwords</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-autofill_passwords_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-ssl_version_2_ocil:questionnaire:1\">\n          <ns8:title>Disable
      SSL Version 2.0 in Firefox</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-ssl_version_2_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-ssl_protocol_tls_ocil:questionnaire:1\">\n          <ns8:title>Enable
      TLS Usage in Firefox</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-ssl_protocol_tls_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_text_ocil:questionnaire:1\">\n          <ns8:title>Disable
      JavaScript''s Ability To Modify The Browser Appearance</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-javascript_status_bar_text_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-javascript_window_changes_ocil:questionnaire:1\">\n          <ns8:title>Disable
      JavaScript''s Raise Or Lower Windows Capability</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-javascript_window_changes_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_changes_ocil:questionnaire:1\">\n          <ns8:title>Disable
      JavaScript''s Ability To Change The Status Bar</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-javascript_status_bar_changes_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-auto-update_of_firefox_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Firefox Auto-Update Capability</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-auto-update_of_firefox_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-pop-up_windows_ocil:questionnaire:1\">\n          <ns8:title>Enable
      Firefox Pop-up Blocker</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-pop-up_windows_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-lock_settings_config_file_ocil:questionnaire:1\">\n          <ns8:title>Set
      Firefox Configuration File Location</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-lock_settings_config_file_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-lock_settings_obscure_ocil:questionnaire:1\">\n          <ns8:title>Disable
      Firefox Configuration File ROT-13 Encoding</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-lock_settings_obscure_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1\">\n          <ns8:title>Enable
      Shared System Certificates</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1\">\n          <ns8:title>The
      DoD Root Certificate Exists</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-cookies_clear_ocil:questionnaire:1\">\n          <ns8:title>Clear
      Data When Firefox Closes</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-cookies_clear_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n        <ns8:questionnaire
      id=\"ocil:ssg-firefox_preferences-cookies_user_notice_ocil:questionnaire:1\">\n          <ns8:title>Disable
      User Prompt When Data Is Cleared</ns8:title>\n          <ns8:actions>\n            <ns8:test_action_ref>ocil:ssg-firefox_preferences-cookies_user_notice_action:testaction:1</ns8:test_action_ref>\n          </ns8:actions>\n        </ns8:questionnaire>\n      </ns8:questionnaires>\n      <ns8:test_actions>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-home_page_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-home_page_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-non-secure_page_warning_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-non-secure_page_warning_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-ssl_version_3_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-ssl_version_3_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-password_store_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-password_store_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-installed_firefox_version_supported_action:testaction:1\" question_ref=\"ocil:ssg-installed_firefox_version_supported_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-auto-download_actions_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-javascript_context_menus_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-javascript_context_menus_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-open_confirmation_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-open_confirmation_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-verification_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-verification_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-javascript_window_resizing_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-javascript_window_resizing_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-search_update_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-search_update_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-autofill_forms_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-autofill_forms_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-shell_protocol_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-shell_protocol_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-addons_plugin_updates_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-addons_plugin_updates_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-autofill_passwords_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-autofill_passwords_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-ssl_version_2_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-ssl_version_2_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-ssl_protocol_tls_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-ssl_protocol_tls_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_text_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-javascript_status_bar_text_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-javascript_window_changes_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-javascript_window_changes_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_changes_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-javascript_status_bar_changes_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-auto-update_of_firefox_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-auto-update_of_firefox_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-pop-up_windows_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-pop-up_windows_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-lock_settings_config_file_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-lock_settings_config_file_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-lock_settings_obscure_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-lock_settings_obscure_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-cookies_clear_action:testaction:1\" question_ref=\"ocil:ssg-firefox_preferences-cookies_clear_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n        <ns8:boolean_question_test_action
      id=\"ocil:ssg-firefox_preferences-cookies_user_notice_action:testaction:1\"
      question_ref=\"ocil:ssg-firefox_preferences-cookies_user_notice_question:question:1\">\n          <ns8:when_true>\n            <ns8:result>PASS</ns8:result>\n          </ns8:when_true>\n          <ns8:when_false>\n            <ns8:result>FAIL</ns8:result>\n          </ns8:when_false>\n        </ns8:boolean_question_test_action>\n      </ns8:test_actions>\n      <ns8:questions>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-home_page_question:question:1\">\n          <ns8:question_text>To
      verify that default home page is set,\nrun the following command:\n$ grep ''browser.startup.homepage''
      FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"browser.startup.homepage\",
      \"\");\n      Is it the case that it is not configured?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-non-secure_page_warning_question:question:1\">\n          <ns8:question_text>To
      verify that non-secure page warnings are enabled,\nrun the following command:\n$
      grep ''security.warn_leaving_secure'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"security.warn_leaving_secure\", \"true\");\n      Is
      it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-ssl_version_3_question:question:1\">\n          <ns8:question_text>To
      verify that SSL version 3 is disabled,\nrun the following command:\n$ grep ''security.enable_ssl3''
      FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"security.enable_ssl3\",
      \"false\");\n      Is it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-password_store_question:question:1\">\n          <ns8:question_text>To
      verify that the password store is disabled,\nrun the following command:\n$ grep
      ''signon.rememberSignons'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"signon.rememberSignons\",
      \"false\");\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-installed_firefox_version_supported_question:question:1\">\n          <ns8:question_text>If
      the system is joined to the Red Hat Network, a Red Hat Satellite Server, or\na
      yum server which provides updates, invoking the following command will\nindicate
      if updates are available:\n$ sudo yum check-update\nIf the system is not configured
      to update from one of these sources,\nrun the following command to list when
      each package was last updated:\n$ rpm -qa -last\nCompare this to Red Hat Security
      Advisories (RHSA) listed at\n\n    https://access.redhat.com/security/updates/active/https://access.redhat.com/security/updates/active/\nto
      determine if the system is missing applicable updates.\n      Is it the case
      that it is not updated?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-auto-download_actions_question:question:1\">\n          <ns8:question_text>To
      verify that user interaction is required for the downloading of MIME types,\nrun
      the following command:\n$ grep ''browser.helperApps.alwaysAsk.force'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"browser.helperApps.alwaysAsk.force\", \"true\");\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-javascript_context_menus_question:question:1\">\n          <ns8:question_text>To
      verify that JavaScript cannot change context menus,\nrun the following command:\n$
      grep ''dom.event.contextmenu.enabled'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"dom.event.contextmenu.enabled\", \"false\");\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-open_confirmation_question:question:1\">\n          <ns8:question_text>To
      verify that downloading and opening file confirmation is enabled,\nrun the following
      command:\n$ grep ''plugin.disable_full_page_plugin_for_types'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"plugin.disable_full_page_plugin_for_types\",
      \"\");\n      Is it the case that it is not set or application listing is incorrect?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-verification_question:question:1\">\n          <ns8:question_text>To
      verify that certificate verification is enabled, run the following command:\n$
      grep ''security.default_personal_cert'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"security.default_personal_cert\", \"Ask Every Time\");\n      Is
      it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-javascript_window_resizing_question:question:1\">\n          <ns8:question_text>To
      verify that JavaScript cannot change windows sizing,\nrun the following command:\n$
      grep ''dom.disable_window_move_resize'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"dom.disable_window_move_resize\", \"true\");\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-search_update_question:question:1\">\n          <ns8:question_text>To
      verify that search plugins cannot automatically update,\nrun the following command:\n$
      grep ''browser.search.update'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should
      return:\nlockPref(\"browser.search.update\", \"false\");\n      Is it the case
      that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-autofill_forms_question:question:1\">\n          <ns8:question_text>To
      verify that Autofill Form Assistance is disabled,\nrun the following command:\n$
      grep ''browser.formfill.enable'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should
      return:\nlockPref(\"browser.formfill.enable\", false);\n      Is it the case
      that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-shell_protocol_question:question:1\">\n          <ns8:question_text>To
      verify that the shell protocol access is disabled,\nrun the following command:\n$
      grep ''network.protocol-handler.external.shell'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"network.protocol-handler.external.shell\",
      \"false\");\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-addons_plugin_updates_question:question:1\">\n          <ns8:question_text>To
      verify that add-ons and plugins cannot automatically update,\nrun the following
      command:\n$ grep ''extensions.update.enabled'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"extensions.update.enabled\", false);\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-autofill_passwords_question:question:1\">\n          <ns8:question_text>To
      verify that password autofill is disabled,\nrun the following command:\n$ grep
      ''signon.prefillForms'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"signon.prefillForms\",
      false);\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-ssl_version_2_question:question:1\">\n          <ns8:question_text>To
      verify that SSL version 2.0 is disabled,\nrun the following command:\n$ grep
      ''security.enable_ssl2'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"security.enable_ssl2\",
      \"false\");\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-ssl_protocol_tls_question:question:1\">\n          <ns8:question_text>To
      verify that TLS is enabled, run the following command:\n$ grep ''security.enable_tls''
      FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"security.enable_tls\",
      \"true\");\n      Is it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_text_question:question:1\">\n          <ns8:question_text>To
      verify that JavaScript cannot change the browser appearance,\nrun the following
      command:\n$ grep ''dom.disable_window_open_feature.status'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"dom.disable_window_open_feature.status\",
      \"true\");\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-javascript_window_changes_question:question:1\">\n          <ns8:question_text>To
      verify that JavaScript cannot change windows sizing,\nrun the following command:\n$
      grep ''dom.disable_window_flip'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should
      return:\nlockPref(\"dom.disable_window_flip\", \"true\");\n      Is it the case
      that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-javascript_status_bar_changes_question:question:1\">\n          <ns8:question_text>To
      verify that JavaScript cannot change the status bar,\nrun the following command:\n$
      grep ''dom.disable_window_status_change'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"dom.disable_window_status_change\", \"true\");\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-auto-update_of_firefox_question:question:1\">\n          <ns8:question_text>To
      verify that Firefox cannot auto-update,\nrun the following command:\n$ grep
      ''app.update.enable'' FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"app.update.enable\",
      false);\n      Is it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-pop-up_windows_question:question:1\">\n          <ns8:question_text>To
      verify that pop-up blocker is enabled,\nrun the following command:\n$ grep ''dom.disable_window_open_feature.status''
      FIREFOX_INSTALL_DIR/*.cfg\nThe output should return:\nlockPref(\"dom.disable_window_open_feature.status\",
      \"true\");\n      Is it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-lock_settings_config_file_question:question:1\">\n          <ns8:question_text>To
      verify that configuration filename is set, run the following command:\n$ grep
      ''filename'' FIREFOX_INSTALL_DIR/defaults/preferences/*.js\nThe output should
      return something similar to:\npref(\"general.config.filename\", \"mozilla.cfg\");\n      Is
      it the case that users can change mandatory settings?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-lock_settings_obscure_question:question:1\">\n          <ns8:question_text>To
      verify that ROT-13 encoding is disabled, run the following command:\n$ grep
      ''obscure_value'' FIREFOX_INSTALL_DIR/defaults/preferences/*.js\nThe output
      should return something similar to:\npref(\"general.config.obscure_value\",
      0);\n      Is it the case that users can change mandatory settings?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1\">\n          <ns8:question_text>To
      verify that the central system cerificate authority store is enabled,\nrun the
      following command:\n$ ls -l /etc/alternatives/libnssckbi.so.x86_64\nThe output
      should return something similar to:\nlrwxrwxrwx. 1 root root 34 Apr 30 09:19
      /etc/alternatives/libnssckbi.so.x86_64 -&gt; /usr/lib64/pkcs11/p11-kit-trust.so\n      Is
      it the case that it is not enabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1\">\n          <ns8:question_text>To
      verify that the DoD root certificate is installed,\nlist all certificates in
      /etc/pki/ca-trust/source/anchors\nand compare them to the DoD root certificate.
      If there is a match\nto the DoD root certificate, then the DoD root certificate
      is \ninstalled.\n      Is it the case that it is not installed?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-cookies_clear_question:question:1\">\n          <ns8:question_text>To
      verify that Firefox clears data on exit,\nrun the following command:\n$ grep
      ''privacy.sanitize.sanitizeOnShutdown'' FIREFOX_INSTALL_DIR/*.cfg\nThe output
      should return:\nlockPref(\"privacy.sanitize.sanitizeOnShutdown\", true);\n      Is
      it the case that it is not set to clear?\n      </ns8:question_text>\n        </ns8:boolean_question>\n        <ns8:boolean_question
      id=\"ocil:ssg-firefox_preferences-cookies_user_notice_question:question:1\">\n          <ns8:question_text>To
      verify that Firefox does not prompt users about data being cleared,\nrun the
      following command:\n$ grep ''privacy.sanitize.promptOnSanitize'' FIREFOX_INSTALL_DIR/*.cfg\nThe
      output should return:\nlockPref(\"privacy.sanitize.promptOnSanitize\", false);\n      Is
      it the case that it is not disabled?\n      </ns8:question_text>\n        </ns8:boolean_question>\n      </ns8:questions>\n    </ns8:ocil>\n  </ns0:component>\n  <ns0:component
      id=\"scap_org.open-scap_comp_ssg-firefox-xccdf-1.2.xml\" timestamp=\"2020-01-16T13:55:38\">\n    <ns9:Benchmark
      id=\"xccdf_org.ssgproject.content_benchmark_FIREFOX\" resolved=\"1\" style=\"SCAP_1.2\"
      xml:lang=\"en-US\">\n      <ns9:status date=\"2020-01-16\">draft</ns9:status>\n      <ns9:title
      xml:lang=\"en-US\">Guide to the Secure Configuration of Firefox</ns9:title>\n      <ns9:description
      xml:lang=\"en-US\">This guide presents a catalog of security-relevant\nconfiguration
      settings for Firefox. It is a rendering of\ncontent structured in the eXtensible
      Configuration Checklist Description Format (XCCDF)\nin order to support security
      automation.  The SCAP content is\nis available in the <html:code>scap-security-guide</html:code>
      package which is developed at\n\n    <html:a href=\"https://www.open-scap.org/security-policies/scap-security-guide\">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.\n<html:br/><html:br/>\nProviding
      system administrators with such guidance informs them how to securely\nconfigure
      systems under their control in a variety of network roles. Policy\nmakers and
      baseline creators can use this catalog of settings, with its\nassociated references
      to higher-level security control catalogs, in order to\nassist them in security
      baseline creation. This guide is a <html:em>catalog, not a\nchecklist</html:em>,
      and satisfaction of every item is not likely to be possible or\nsensible in
      many operational scenarios. However, the XCCDF format enables\ngranular selection
      and adjustment of settings, and their association with OVAL\nand OCIL content
      provides an automated checking capability. Transformations of\nthis document,
      and its associated automated checking content, are capable of\nproviding baselines
      that meet a diverse set of policy objectives. Some example\nXCCDF <html:em>Profiles</html:em>,
      which are selections of items that form checklists and\ncan be used as baselines,
      are available with this guide. They can be\nprocessed, in an automated fashion,
      with tools that support the Security\nContent Automation Protocol (SCAP). The
      DISA STIG for Firefox,\nwhich provides required settings for US Department of
      Defense systems, is\none example of a baseline created from this guidance.\n</ns9:description>\n      <ns9:notice
      id=\"terms_of_use\" xml:lang=\"en-US\">Do not attempt to implement any of the
      settings in\nthis guide without first testing them in a non-operational environment.
      The\ncreators of this guidance assume no responsibility whatsoever for its use
      by\nother parties, and makes no guarantees, expressed or implied, about its\nquality,
      reliability, or any other characteristic.\n</ns9:notice>\n      <ns9:front-matter
      xml:lang=\"en-US\">The SCAP Security Guide Project<html:br/>\n\n    <html:a
      href=\"https://www.open-scap.org/security-policies/scap-security-guide\">https://www.open-scap.org/security-policies/scap-security-guide</html:a>\n</ns9:front-matter>\n      <ns9:rear-matter
      xml:lang=\"en-US\">Red Hat and Red Hat Enterprise Linux are either registered\ntrademarks
      or trademarks of Red Hat, Inc. in the United States and other\ncountries. All
      other names are registered trademarks or trademarks of their\nrespective companies.\n</ns9:rear-matter>\n      <ns9:platform
      idref=\"cpe:/a:mozilla:firefox\"/>\n      <ns9:version update=\"https://github.com/OpenSCAP/scap-security-guide/releases/latest\">0.1.48</ns9:version>\n      <ns9:metadata>\n        <dc:publisher>SCAP
      Security Guide Project</dc:publisher>\n        <dc:creator>SCAP Security Guide
      Project</dc:creator>\n        <dc:contributor>Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>\n        <dc:contributor>0x66656c6978
      &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Gabe
      Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Firas
      AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>\n        <dc:contributor>Christopher
      Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>\n        <dc:contributor>angystardust
      &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Chuck
      Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>\n        <dc:contributor>Ryan
      Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>\n        <dc:contributor>Alex
      Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>\n        <dc:contributor>Molly
      Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>\n        <dc:contributor>Gabriel
      Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Alexander
      Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>\n        <dc:contributor>Jose
      Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Joseph
      Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Jeffrey
      Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>\n        <dc:contributor>Olivier
      Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>\n        <dc:contributor>Ted
      Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Blake
      Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>\n        <dc:contributor>Patrick
      Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>\n        <dc:contributor>Nick
      Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>\n        <dc:contributor>James
      Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>\n        <dc:contributor>Frank
      Caviggia &lt;fcaviggi@ra.iad.redhat.com&gt;</dc:contributor>\n        <dc:contributor>Eric
      Christensen &lt;echriste@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Jayson
      Cofell &lt;1051437+70k10@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Caleb
      Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>\n        <dc:contributor>Deric
      Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Maura
      Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>\n        <dc:contributor>Klaas
      Demter &lt;demter@atix.de&gt;</dc:contributor>\n        <dc:contributor>dhanushkar-wso2
      &lt;dhanushkar@wso2.com&gt;</dc:contributor>\n        <dc:contributor>Andrew
      DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>\n        <dc:contributor>dom
      &lt;dominique.blaze@devinci.fr&gt;</dc:contributor>\n        <dc:contributor>Jean-Baptiste
      Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>\n        <dc:contributor>drax
      &lt;applezip@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Sebastian
      Dunne &lt;sdunne@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Greg
      Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>\n        <dc:contributor>Alexis
      Facques &lt;alexis.facques@mythalesgroup.io&gt;</dc:contributor>\n        <dc:contributor>Leah
      Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Alijohn
      Ghassemlouei &lt;alijohn.ghassemlouei@sapns2.com&gt;</dc:contributor>\n        <dc:contributor>ghylock
      &lt;ghylock@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Andrew Gilmore
      &lt;agilmore2@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Joshua
      Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>\n        <dc:contributor>Loren
      Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Patrik
      Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>\n        <dc:contributor>Steve
      Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Marek
      Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Rebekah
      Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>\n        <dc:contributor>Trey
      Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Henning
      Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>\n        <dc:contributor>hex2a
      &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>John
      Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>\n        <dc:contributor>Jakub
      Hrozek &lt;jhrozek@redhat.com&gt;</dc:contributor>\n        <dc:contributor>De
      Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>\n        <dc:contributor>Robin
      Price II &lt;robin@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Yasir
      Imam &lt;yimam@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Jiri
      Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Keith
      Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Jeremiah
      Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>\n        <dc:contributor>Stephan
      Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>\n        <dc:contributor>Jono
      &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>\n        <dc:contributor>Kai
      Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>\n        <dc:contributor>Charles
      Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>\n        <dc:contributor>Yuli
      Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>\n        <dc:contributor>Nathan
      Kinder &lt;nkinder@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Lee
      Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Evgeny
      Kolesnikov &lt;ekolesni@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Peter
      ''Pessoft'' Kol&#xED;nek &lt;github@pessoft.com&gt;</dc:contributor>\n        <dc:contributor>Luke
      Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>\n        <dc:contributor>Malte
      Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>\n        <dc:contributor>kspargur
      &lt;kspargur@kspargur.csb&gt;</dc:contributor>\n        <dc:contributor>Amit
      Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Fen
      Labalme &lt;fen@civicactions.com&gt;</dc:contributor>\n        <dc:contributor>Ian
      Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>\n        <dc:contributor>Jarrett
      Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>\n        <dc:contributor>Jan Lieskovsky
      &lt;jlieskov@redhat.com&gt;</dc:contributor>\n        <dc:contributor>&#x160;imon
      Luka&#x161;&#xED;k &lt;slukasik@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Milan
      Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Fredrik
      Lys&#xE9;n &lt;fredrik@pipemore.se&gt;</dc:contributor>\n        <dc:contributor>Matus
      Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Jamie
      Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Robert
      McAllister &lt;rmcallis@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Michael
      McConachie &lt;michael@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Khary
      Mendez &lt;kharyam@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Rodney
      Mercer &lt;rmercer@harris.com&gt;</dc:contributor>\n        <dc:contributor>Matt
      Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Brian
      Millett &lt;bmillett@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Mixer9
      &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>mmosel
      &lt;mmosel@kde.example.com&gt;</dc:contributor>\n        <dc:contributor>Zbynek
      Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Kazuo
      Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Michael
      Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>\n        <dc:contributor>Joe
      Nall &lt;joe@nall.com&gt;</dc:contributor>\n        <dc:contributor>Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Axel
      Nennker &lt;axel@nennker.de&gt;</dc:contributor>\n        <dc:contributor>Michele
      Newman &lt;mnewman@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Sean
      O''Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Ilya
      Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>\n        <dc:contributor>Kaustubh
      Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Michael
      Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>\n        <dc:contributor>Max
      R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>\n        <dc:contributor>Jan
      Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>\n        <dc:contributor>pcactr
      &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>\n        <dc:contributor>Kenneth
      Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Nathan
      Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>\n        <dc:contributor>Frank
      Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>\n        <dc:contributor>Stefan
      Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Vojtech
      Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Martin
      Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Wesley
      Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Raphael
      Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>\n        <dc:contributor>T.O.
      Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>\n        <dc:contributor>Kenyon
      Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>\n        <dc:contributor>Mike
      Ralph &lt;mralph@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Rick
      Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>\n        <dc:contributor>Chris
      Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>\n        <dc:contributor>rhayes
      &lt;rhayes@rivierautilities.com&gt;</dc:contributor>\n        <dc:contributor>Pat
      Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>\n        <dc:contributor>rlucente-se-jboss
      &lt;rlucente@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Jesse
      Roland &lt;j.roland277@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Joshua
      Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>\n        <dc:contributor>rrenshaw
      &lt;bofh69@yahoo.com&gt;</dc:contributor>\n        <dc:contributor>Chris Ruffalo
      &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Ray
      Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>\n        <dc:contributor>Willy
      Santos &lt;wsantos@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Gautam
      Satish &lt;gautams@hpe.com&gt;</dc:contributor>\n        <dc:contributor>Watson
      Sato &lt;wsato@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Satoru
      SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Alexander
      Scheel &lt;ascheel@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Bryan
      Schneiders &lt;pschneiders@trisept.com&gt;</dc:contributor>\n        <dc:contributor>shaneboulden
      &lt;shane.boulden@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Spencer
      Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>\n        <dc:contributor>Mark
      Shoger &lt;mshoger@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Thomas
      Sj&#xF6;gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Francisco
      Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>\n        <dc:contributor>David
      Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>\n        <dc:contributor>Kevin
      Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Kenneth
      Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Leland
      Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>\n        <dc:contributor>Justin
      Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Brian
      Stinson &lt;brian@bstinson.com&gt;</dc:contributor>\n        <dc:contributor>Jake
      Stookey &lt;jakestookey@gmail.com&gt;</dc:contributor>\n        <dc:contributor>Jonathan
      Sturges &lt;jsturges@jsturges.remote.csb&gt;</dc:contributor>\n        <dc:contributor>Philippe
      Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>\n        <dc:contributor>Derek
      Thurston &lt;thegrit@gmail.com&gt;</dc:contributor>\n        <dc:contributor>tianzhenjia
      &lt;jiatianzhen@cmss.chinamobile.com&gt;</dc:contributor>\n        <dc:contributor>Paul
      Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>\n        <dc:contributor>tomas.hudik
      &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>\n        <dc:contributor>Jeb
      Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>\n        <dc:contributor>Mat&#x11B;j
      T&#xFD;&#x10D; &lt;matyc@redhat.com&gt;</dc:contributor>\n        <dc:contributor>VadimDor
      &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Shawn
      Wells &lt;shawn@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Daniel
      E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>\n        <dc:contributor>Roy
      Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>\n        <dc:contributor>Rob
      Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Lucas
      Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>\n        <dc:contributor>Xirui
      Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>\n        <dc:contributor>Kevin
      Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>\n        <dc:contributor>Jan
      &#x10C;ern&#xFD; &lt;jcerny@redhat.com&gt;</dc:contributor>\n        <dc:contributor>Michal
      &#x160;ruba&#x159; &lt;msrubar@redhat.com&gt;</dc:contributor>\n        <dc:source>https://github.com/OpenSCAP/scap-security-guide/releases/latest</dc:source>\n      </ns9:metadata>\n      <ns9:model
      system=\"urn:xccdf:scoring:default\"/>\n      <ns9:Profile id=\"xccdf_org.ssgproject.content_profile_stig\">\n        <ns9:title
      override=\"true\" xml:lang=\"en-US\">Upstream Firefox STIG</ns9:title>\n        <ns9:description
      override=\"true\" xml:lang=\"en-US\">This profile is developed under the DoD
      consensus model and DISA FSO Vendor STIG process,\nserving as the upstream development
      environment for the Firefox STIG.\n\nAs a result of the upstream/downstream
      relationship between the SCAP Security Guide project\nand the official DISA
      FSO STIG baseline, users should expect variance between SSG and DISA FSO content.\nFor
      official DISA FSO STIG content, refer to https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance.\n\nWhile
      this profile is packaged by Red Hat as part of the SCAP Security Guide package,
      please note\nthat commercial support of this SCAP content is NOT available.
      This profile is provided as example\nSCAP content with no endorsement for suitability
      or production readiness. Support for this\nprofile is provided by the upstream
      SCAP Security Guide community on a best-effort basis. The\nupstream project
      homepage is https://www.open-scap.org/security-policies/scap-security-guide/.</ns9:description>\n        <ns9:select
      idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-addons_plugin_updates\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_forms\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_passwords\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-auto-update_of_firefox\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_clear\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_user_notice\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_obscure\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_config_file\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-open_confirmation\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-password_store\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-search_update\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-shell_protocol\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_2\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_protocol_tls\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-verification\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_3\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-home_page\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_installed_firefox_version_supported\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_text\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_context_menus\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_changes\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_resizing\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_changes\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-non-secure_page_warning\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_rule_firefox_preferences-pop-up_windows\"
      selected=\"true\"/>\n        <ns9:select idref=\"xccdf_org.ssgproject.content_group_remediation_functions\"
      selected=\"false\"/>\n        <ns9:refine-value idref=\"xccdf_org.ssgproject.content_value_var_default_home_page\"
      selector=\"about_blank\"/>\n      </ns9:Profile>\n      <ns9:Group id=\"xccdf_org.ssgproject.content_group_remediation_functions\">\n        <ns9:title
      xml:lang=\"en-US\">Remediation functions used by the SCAP Security Guide Project</ns9:title>\n        <ns9:description
      xml:lang=\"en-US\">XCCDF form of the various remediation functions as used by
      remediation scripts from the SCAP Security Guide Project.</ns9:description>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_include_merge_files_by_lines\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function include_merge_files_by_lines</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value>function include_merge_files_by_lines
      {\n\t:\n}\n\n# 1: Filename of the \"master\" file\n# 2: Filename of the newly
      created file\nfunction create_empty_file_like {\n\tlocal lines_count\n\tlines_count=$(cat
      \"$1\" | wc -l)\n\tfor _ in $(seq 1 \"$lines_count\"); do\n\t\tprintf ''\\n''
      &gt;&gt; \"$2\"\n\tdone\n}\n\n\n# 1: Filename of the \"master\" file\n# 2: Filename
      of sample flie\nfunction second_file_is_same_except_newlines {\n\tlocal lines_of_master
      lines_of_sample len_of_master line_number i\n\treadarray -t lines_of_master
      &lt; \"$1\"\n\treadarray -t lines_of_sample &lt; \"$2\"\n\n\tlen_of_master=\"${#lines_of_master[@]}\"\n\tif
      test \"$len_of_master\" != \"${#lines_of_sample[@]}\"; then\n\t\techo \"Files
      ''$1'' and ''$2'' have different number of lines, $len_of_master and ${#lines_of_sample[@]}
      respectively.\"\n\t\treturn 1\n\tfi\n\n\tfor line_number in $(seq 1 \"$len_of_master\");
      do\n\t\ti=$((line_number - 1))\n\t\ttest -n \"${lines_of_sample[$i]}\" || continue\n\t\tif
      test \"${lines_of_master[$i]}\" != \"${lines_of_sample[$i]}\"; then\n\t\t\techo
      \"Line $line_number is different in files ''$1'' and ''$2''.\"\n\t\t\treturn
      1\n\t\tfi\n\tdone\n}\n\n\n# 1: Filename of the \"master\" file\n# 2: Filename
      of sample flie\n# 3: List of indices (1-based, space-separated string)\nfunction
      merge_first_lines_to_second_on_indices {\n\tlocal lines_of_master lines_of_sample
      line_number i\n\ttest -f \"$2\" || create_empty_file_like \"$1\" \"$2\"\n\n\treadarray
      -t lines_of_master &lt; \"$1\"\n\treadarray -t lines_of_sample &lt; \"$2\"\n\n\terror_msg=\"$(second_file_is_same_except_newlines
      \"$1\" \"$2\")\"\n\tif test $? != 0; then\n\t\techo \"Error merging lines into
      ''$2'': $error_msg\" &gt;&amp;2\n\t\treturn 1\n\tfi\n\n\tfor line_number in
      $3; do\n\t\ti=$((line_number - 1))\n\t\tlines_of_sample[$i]=\"${lines_of_master[$i]}\"\n\tdone\n\n\tprintf
      \"%s\\n\" \"${lines_of_sample[@]}\" &gt; \"$2\"\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_perform_audit_adjtimex_settimeofday_stime_remediation\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function perform_audit_adjtimex_settimeofday_stime_remediation</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># Function to fix syscall
      audit rule for given system call. It is\n# based on example audit syscall rule
      definitions as outlined in\n# /usr/share/doc/audit-2.3.7/stig.rules file provided
      with the audit\n# package. It will combine multiple system calls belonging to
      the same\n# syscall group into one audit rule (rather than to create audit rule
      per\n# different system call) to avoid audit infrastructure performance penalty\n#
      in the case of ''one-audit-rule-definition-per-one-system-call''. See:\n#\n#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html\n#\n#
      for further details.\n#\n# Expects five arguments (each of them is required)
      in the form of:\n# * audit tool\t\t\t\ttool used to load audit rules,\n# \t\t\t\t\teither
      ''auditctl'', or ''augenrules\n# * audit rules'' pattern\t\taudit rule skeleton
      for same syscall\n# * syscall group\t\t\tgreatest common string this rule shares\n#
      \t\t\t\t\twith other rules from the same group\n# * architecture\t\t\tarchitecture
      this rule is intended for\n# * full form of new rule to add\texpected full form
      of audit rule as to be\n# \t\t\t\t\tadded into audit.rules file\n#\n# Note:
      The 2-th up to 4-th arguments are used to determine how many existing\n# audit
      rules will be inspected for resemblance with the new audit rule\n# (5-th argument)
      the function is going to add. The rule''s similarity check\n# is performed to
      optimize audit.rules definition (merge syscalls of the same\n# group into one
      rule) to avoid the \"single-syscall-per-audit-rule\" performance\n# penalty.\n#\n#
      Example call:\n#\n#\tSee e.g. ''audit_rules_file_deletion_events.sh'' remediation
      script\n#\nfunction fix_audit_syscall_rule {\n\n# Load function arguments into
      local variables\nlocal tool=\"$1\"\nlocal pattern=\"$2\"\nlocal group=\"$3\"\nlocal
      arch=\"$4\"\nlocal full_rule=\"$5\"\n\n# Check sanity of the input\nif [ $#
      -ne \"5\" ]\nthen\n\techo \"Usage: fix_audit_syscall_rule ''tool'' ''pattern''
      ''group'' ''arch'' ''full rule''\"\n\techo \"Aborting.\"\n\texit 1\nfi\n\n#
      Create a list of audit *.rules files that should be inspected for presence and
      correctness\n# of a particular audit rule. The scheme is as follows:\n# \n#
      -----------------------------------------------------------------------------------------\n#  Tool
      used to load audit rules | Rule already defined  |  Audit rules file to inspect    |\n#
      -----------------------------------------------------------------------------------------\n#        auditctl                |     Doesn''t
      matter    |  /etc/audit/audit.rules         |\n# -----------------------------------------------------------------------------------------\n#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |\n#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |\n#
      -----------------------------------------------------------------------------------------\n#\ndeclare
      -a files_to_inspect\n\nretval=0\n\n# First check sanity of the specified audit
      tool\nif [ \"$tool\" != ''auditctl'' ] &amp;&amp; [ \"$tool\" != ''augenrules''
      ]\nthen\n\techo \"Unknown audit rules loading tool: $1. Aborting.\"\n\techo
      \"Use either ''auditctl'' or ''augenrules''!\"\n\treturn 1\n# If audit tool
      is ''auditctl'', then add ''/etc/audit/audit.rules''\n# file to the list of
      files to be inspected\nelif [ \"$tool\" == ''auditctl'' ]\nthen\n\tfiles_to_inspect+=(''/etc/audit/audit.rules''
      )\n# If audit tool is ''augenrules'', then check if the audit rule is defined\n#
      If rule is defined, add ''/etc/audit/rules.d/*.rules'' to the list for inspection\n#
      If rule isn''t defined yet, add ''/etc/audit/rules.d/$key.rules'' to the list
      for inspection\nelif [ \"$tool\" == ''augenrules'' ]\nthen\n\t# Extract audit
      $key from audit rule so we can use it later\n\tkey=$(expr \"$full_rule\" : ''.*-k[[:space:]]\\([^[:space:]]\\+\\)''
      ''|'' \"$full_rule\" : ''.*-F[[:space:]]key=\\([^[:space:]]\\+\\)'')\n\treadarray
      -t matches &lt; &lt;(sed -s -n -e \"\\;${pattern};!d\" -e \"/${arch}/!d\" -e
      \"/${group}/!d;F\" /etc/audit/rules.d/*.rules)\n\tif [ $? -ne 0 ]\n\tthen\n\t\tretval=1\n\tfi\n\tfor
      match in \"${matches[@]}\"\n\tdo\n\t\tfiles_to_inspect+=(\"${match}\")\n\tdone\n\t#
      Case when particular rule isn''t defined in /etc/audit/rules.d/*.rules yet\n\tif
      [ ${#files_to_inspect[@]} -eq \"0\" ]\n\tthen\n\t\tfile_to_inspect=\"/etc/audit/rules.d/$key.rules\"\n\t\tfiles_to_inspect=(\"$file_to_inspect\")\n\t\tif
      [ ! -e \"$file_to_inspect\" ]\n\t\tthen\n\t\t\ttouch \"$file_to_inspect\"\n\t\t\tchmod
      0640 \"$file_to_inspect\"\n\t\tfi\n\tfi\nfi\n\n#\n# Indicator that we want to
      append $full_rule into $audit_file by default\nlocal append_expected_rule=0\n\nfor
      audit_file in \"${files_to_inspect[@]}\"\ndo\n\t# Filter existing $audit_file
      rules'' definitions to select those that:\n\t# * follow the rule pattern, and\n\t#
      * meet the hardware architecture requirement, and\n\t# * are current syscall
      group specific\n\treadarray -t existing_rules &lt; &lt;(sed -e \"\\;${pattern};!d\"
      -e \"/${arch}/!d\" -e \"/${group}/!d\"  \"$audit_file\")\n\tif [ $? -ne 0 ]\n\tthen\n\t\tretval=1\n\tfi\n\n\t#
      Process rules found case-by-case\n\tfor rule in \"${existing_rules[@]}\"\n\tdo\n\t\t#
      Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)\n\t\tif
      [ \"${rule}\" != \"${full_rule}\" ]\n\t\tthen\n\t\t\t# If so, isolate just ''(-S
      \\w)+'' substring of that rule\n\t\t\trule_syscalls=$(echo \"$rule\" | grep
      -o -P ''(-S \\w+ )+'')\n\t\t\t# Check if list of ''-S syscall'' arguments of
      that rule is subset\n\t\t\t# of ''-S syscall'' list of expected $full_rule\n\t\t\tif
      grep -q -- \"$rule_syscalls\" &lt;&lt;&lt; \"$full_rule\"\n\t\t\tthen\n\t\t\t\t#
      Rule is covered (i.e. the list of -S syscalls for this rule is\n\t\t\t\t# subset
      of -S syscalls of $full_rule =&gt; existing rule can be deleted\n\t\t\t\t# Thus
      delete the rule from audit.rules &amp; our array\n\t\t\t\tsed -i -e \"\\;${rule};d\"
      \"$audit_file\"\n\t\t\t\tif [ $? -ne 0 ]\n\t\t\t\tthen\n\t\t\t\t\tretval=1\n\t\t\t\tfi\n\t\t\t\texisting_rules=(\"${existing_rules[@]//$rule/}\")\n\t\t\telse\n\t\t\t\t#
      Rule isn''t covered by $full_rule - it besides -S syscall arguments\n\t\t\t\t#
      for this group contains also -S syscall arguments for other syscall\n\t\t\t\t#
      group. Example: ''-S lchown -S fchmod -S fchownat'' =&gt; group=''chown''\n\t\t\t\t#
      since ''lchown'' &amp; ''fchownat'' share ''chown'' substring\n\t\t\t\t# Therefore:\n\t\t\t\t#
      * 1) delete the original rule from audit.rules\n\t\t\t\t# (original ''-S lchown
      -S fchmod -S fchownat'' rule would be deleted)\n\t\t\t\t# * 2) delete the -S
      syscall arguments for this syscall group, but\n\t\t\t\t# keep those not belonging
      to this syscall group\n\t\t\t\t# (original ''-S lchown -S fchmod -S fchownat''
      would become ''-S fchmod''\n\t\t\t\t# * 3) append the modified (filtered) rule
      again into audit.rules\n\t\t\t\t# if the same rule not already present\n\t\t\t\t#\n\t\t\t\t#
      1) Delete the original rule\n\t\t\t\tsed -i -e \"\\;${rule};d\" \"$audit_file\"\n\t\t\t\tif
      [ $? -ne 0 ]\n\t\t\t\tthen\n\t\t\t\t\tretval=1\n\t\t\t\tfi\n\n\t\t\t\t# 2) Delete
      syscalls for this group, but keep those from other groups\n\t\t\t\t# Convert
      current rule syscall''s string into array splitting by ''-S'' delimiter\n\t\t\t\tIFS_BKP=\"$IFS\"\n\t\t\t\tIFS=$''-S''\n\t\t\t\tread
      -a rule_syscalls_as_array &lt;&lt;&lt; \"$rule_syscalls\"\n\t\t\t\t# Reset IFS
      back to default\n\t\t\t\tIFS=\"$IFS_BKP\"\n\t\t\t\t# Splitting by \"-S\" can''t
      be replaced by the readarray functionality easily\n\n\t\t\t\t# Declare new empty
      string to hold ''-S syscall'' arguments from other groups\n\t\t\t\tnew_syscalls_for_rule=''''\n\t\t\t\t#
      Walk through existing ''-S syscall'' arguments\n\t\t\t\tfor syscall_arg in \"${rule_syscalls_as_array[@]}\"\n\t\t\t\tdo\n\t\t\t\t\t#
      Skip empty $syscall_arg values\n\t\t\t\t\tif [ \"$syscall_arg\" == '''' ]\n\t\t\t\t\tthen\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tfi\n\t\t\t\t\t#
      If the ''-S syscall'' doesn''t belong to current group add it to the new list\n\t\t\t\t\t#
      (together with adding ''-S'' delimiter back for each of such item found)\n\t\t\t\t\tif
      grep -q -v -- \"$group\" &lt;&lt;&lt; \"$syscall_arg\"\n\t\t\t\t\tthen\n\t\t\t\t\t\tnew_syscalls_for_rule=\"$new_syscalls_for_rule
      -S $syscall_arg\"\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\t\t# Replace original ''-S
      syscall'' list with the new one for this rule\n\t\t\t\tupdated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}\n\t\t\t\t#
      Squeeze repeated whitespace characters in rule definition (if any) into one\n\t\t\t\tupdated_rule=$(echo
      \"$updated_rule\" | tr -s ''[:space:]'')\n\t\t\t\t# 3) Append the modified /
      filtered rule again into audit.rules\n\t\t\t\t#    (but only in case it''s not
      present yet to prevent duplicate definitions)\n\t\t\t\tif ! grep -q -- \"$updated_rule\"
      \"$audit_file\"\n\t\t\t\tthen\n\t\t\t\t\techo \"$updated_rule\" &gt;&gt; \"$audit_file\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\t#
      $audit_file already contains the expected rule form for this\n\t\t\t# architecture
      &amp; key =&gt; don''t insert it second time\n\t\t\tappend_expected_rule=1\n\t\tfi\n\tdone\n\n\t#
      We deleted all rules that were subset of the expected one for this arch &amp;
      key.\n\t# Also isolated rules containing system calls not from this system calls
      group.\n\t# Now append the expected rule if it''s not present in $audit_file
      yet\n\tif [[ ${append_expected_rule} -eq \"0\" ]]\n\tthen\n\t\techo \"$full_rule\"
      &gt;&gt; \"$audit_file\"\n\tfi\ndone\n\nreturn $retval\n\n}\n\n\n# Function
      to perform remediation for the ''adjtimex'', ''settimeofday'', and ''stime''
      audit\n# system calls on RHEL, Fedora or OL systems.\n# Remediation performed
      for both possible tools: ''auditctl'' and ''augenrules''.\n#\n# Note: ''stime''
      system call isn''t known at 64-bit arch (see \"$ ausyscall x86_64 stime\" ''s
      output)\n# therefore excluded from the list of time group system calls to be
      audited on this arch\n#\n# Example Call:\n#\n#      perform_audit_adjtimex_settimeofday_stime_remediation\n#\nfunction
      perform_audit_adjtimex_settimeofday_stime_remediation {\n\n# Retrieve hardware
      architecture of the underlying system\n[ \"$(getconf LONG_BIT)\" = \"32\" ]
      &amp;&amp; RULE_ARCHS=(\"b32\") || RULE_ARCHS=(\"b32\" \"b64\")\n\nfor ARCH
      in \"${RULE_ARCHS[@]}\"\ndo\n\n\tPATTERN=\"-a always,exit -F arch=${ARCH} -S
      .* -k *\"\n\t# Create expected audit group and audit rule form for particular
      system call &amp; architecture\n\tif [ ${ARCH} = \"b32\" ]\n\tthen\n\t\t# stime
      system call is known at 32-bit arch (see e.g \"$ ausyscall i386 stime\" ''s
      output)\n\t\t# so append it to the list of time group system calls to be audited\n\t\tGROUP=\"\\(adjtimex\\|settimeofday\\|stime\\)\"\n\t\tFULL_RULE=\"-a
      always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -S stime -k audit_time_rules\"\n\telif
      [ ${ARCH} = \"b64\" ]\n\tthen\n\t\t# stime system call isn''t known at 64-bit
      arch (see \"$ ausyscall x86_64 stime\" ''s output)\n\t\t# therefore don''t add
      it to the list of time group system calls to be audited\n\t\tGROUP=\"\\(adjtimex\\|settimeofday\\)\"\n\t\tFULL_RULE=\"-a
      always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -k audit_time_rules\"\n\tfi\n\t#
      Perform the remediation for both possible tools: ''auditctl'' and ''augenrules''\n\tfix_audit_syscall_rule
      \"auditctl\" \"$PATTERN\" \"$GROUP\" \"$ARCH\" \"$FULL_RULE\"\n\tfix_audit_syscall_rule
      \"augenrules\" \"$PATTERN\" \"$GROUP\" \"$ARCH\" \"$FULL_RULE\"\ndone\n\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_fix_audit_watch_rule\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function fix_audit_watch_rule</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># Function to fix audit
      file system object watch rule for given path:\n# * if rule exists, also verifies
      the -w bits match the requirements\n# * if rule doesn''t exist yet, appends
      expected rule form to $files_to_inspect\n#   audit rules file, depending on
      the tool which was used to load audit rules\n#\n# Expects four arguments (each
      of them is required) in the form of:\n# * audit tool\t\t\t\ttool used to load
      audit rules,\n# \t\t\t\t\teither ''auditctl'', or ''augenrules''\n# * path                        \tvalue
      of -w audit rule''s argument\n# * required access bits        \tvalue of -p
      audit rule''s argument\n# * key                         \tvalue of -k audit
      rule''s argument\n#\n# Example call:\n#\n#       fix_audit_watch_rule \"auditctl\"
      \"/etc/localtime\" \"wa\" \"audit_time_rules\"\n#\nfunction fix_audit_watch_rule
      {\n\n# Load function arguments into local variables\nlocal tool=\"$1\"\nlocal
      path=\"$2\"\nlocal required_access_bits=\"$3\"\nlocal key=\"$4\"\n\n# Check
      sanity of the input\nif [ $# -ne \"4\" ]\nthen\n\techo \"Usage: fix_audit_watch_rule
      ''tool'' ''path'' ''bits'' ''key''\"\n\techo \"Aborting.\"\n\texit 1\nfi\n\n#
      Create a list of audit *.rules files that should be inspected for presence and
      correctness\n# of a particular audit rule. The scheme is as follows:\n#\n# -----------------------------------------------------------------------------------------\n#
      Tool used to load audit rules\t| Rule already defined\t|  Audit rules file to
      inspect\t  |\n# -----------------------------------------------------------------------------------------\n#\tauditctl\t\t|     Doesn''t
      matter\t|  /etc/audit/audit.rules\t  |\n# -----------------------------------------------------------------------------------------\n#
      \taugenrules\t\t|          Yes\t\t|  /etc/audit/rules.d/*.rules\t  |\n# \taugenrules\t\t|          No\t\t|  /etc/audit/rules.d/$key.rules  |\n#
      -----------------------------------------------------------------------------------------\ndeclare
      -a files_to_inspect\nfiles_to_inspect=()\n\n# Check sanity of the specified
      audit tool\nif [ \"$tool\" != ''auditctl'' ] &amp;&amp; [ \"$tool\" != ''augenrules''
      ]\nthen\n\techo \"Unknown audit rules loading tool: $1. Aborting.\"\n\techo
      \"Use either ''auditctl'' or ''augenrules''!\"\n\texit 1\n# If the audit tool
      is ''auditctl'', then add ''/etc/audit/audit.rules''\n# into the list of files
      to be inspected\nelif [ \"$tool\" == ''auditctl'' ]\nthen\n\tfiles_to_inspect+=(''/etc/audit/audit.rules'')\n#
      If the audit is ''augenrules'', then check if rule is already defined\n# If
      rule is defined, add ''/etc/audit/rules.d/*.rules'' to list of files for inspection.\n#
      If rule isn''t defined, add ''/etc/audit/rules.d/$key.rules'' to list of files
      for inspection.\nelif [ \"$tool\" == ''augenrules'' ]\nthen\n\treadarray -t
      matches &lt; &lt;(grep -P \"[\\s]*-w[\\s]+$path\" /etc/audit/rules.d/*.rules)\n\n\t#
      For each of the matched entries\n\tfor match in \"${matches[@]}\"\n\tdo\n\t\t#
      Extract filepath from the match\n\t\trulesd_audit_file=$(echo $match | cut -f1
      -d '':'')\n\t\t# Append that path into list of files for inspection\n\t\tfiles_to_inspect+=(\"$rulesd_audit_file\")\n\tdone\n\t#
      Case when particular audit rule isn''t defined yet\n\tif [ \"${#files_to_inspect[@]}\"
      -eq \"0\" ]\n\tthen\n\t\t# Append ''/etc/audit/rules.d/$key.rules'' into list
      of files for inspection\n\t\tlocal key_rule_file=\"/etc/audit/rules.d/$key.rules\"\n\t\t#
      If the $key.rules file doesn''t exist yet, create it with correct permissions\n\t\tif
      [ ! -e \"$key_rule_file\" ]\n\t\tthen\n\t\t\ttouch \"$key_rule_file\"\n\t\t\tchmod
      0640 \"$key_rule_file\"\n\t\tfi\n\n\t\tfiles_to_inspect+=(\"$key_rule_file\")\n\tfi\nfi\n\n#
      Finally perform the inspection and possible subsequent audit rule\n# correction
      for each of the files previously identified for inspection\nfor audit_rules_file
      in \"${files_to_inspect[@]}\"\ndo\n\n\t# Check if audit watch file system object
      rule for given path already present\n\tif grep -q -P -- \"[\\s]*-w[\\s]+$path\"
      \"$audit_rules_file\"\n\tthen\n\t\t# Rule is found =&gt; verify yet if existing
      rule definition contains\n\t\t# all of the required access type bits\n\n\t\t#
      Escape slashes in path for use in sed pattern below\n\t\tlocal esc_path=${path//$''/''/$''\\/''}\n\t\t#
      Define BRE whitespace class shortcut\n\t\tlocal sp=\"[[:space:]]\"\n\t\t# Extract
      current permission access types (e.g. -p [r|w|x|a] values) from audit rule\n\t\tcurrent_access_bits=$(sed
      -ne \"s/$sp*-w$sp\\+$esc_path$sp\\+-p$sp\\+\\([rxwa]\\{1,4\\}\\).*/\\1/p\" \"$audit_rules_file\")\n\t\t#
      Split required access bits string into characters array\n\t\t# (to check bit''s
      presence for one bit at a time)\n\t\tfor access_bit in $(echo \"$required_access_bits\"
      | grep -o .)\n\t\tdo\n\t\t\t# For each from the required access bits (e.g. ''w'',
      ''a'') check\n\t\t\t# if they are already present in current access bits for
      rule.\n\t\t\t# If not, append that bit at the end\n\t\t\tif ! grep -q \"$access_bit\"
      &lt;&lt;&lt; \"$current_access_bits\"\n\t\t\tthen\n\t\t\t\t# Concatenate the
      existing mask with the missing bit\n\t\t\t\tcurrent_access_bits=\"$current_access_bits$access_bit\"\n\t\t\tfi\n\t\tdone\n\t\t#
      Propagate the updated rule''s access bits (original + the required\n\t\t# ones)
      back into the /etc/audit/audit.rules file for that rule\n\t\tsed -i \"s/\\($sp*-w$sp\\+$esc_path$sp\\+-p$sp\\+\\)\\([rxwa]\\{1,4\\}\\)\\(.*\\)/\\1$current_access_bits\\3/\"
      \"$audit_rules_file\"\n\telse\n\t\t# Rule isn''t present yet. Append it at the
      end of $audit_rules_file file\n\t\t# with proper key\n\n\t\techo \"-w $path
      -p $required_access_bits -k $key\" &gt;&gt; \"$audit_rules_file\"\n\tfi\ndone\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_set_faillock_option_to_value_in_pam_file\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function set_faillock_option_to_value_in_pam_file</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value>function set_faillock_option_to_value_in_pam_file
      {\n\t# If invoked with no arguments, exit. This is an intentional behavior.\n\t[
      $# -gt 1 ] || return 0\n\t[ $# -ge 3 ] || die \"$0 requires exactly zero, three,
      or four arguments\"\n\t[ $# -le 4 ] || die \"$0 requires exactly zero, three,
      or four arguments\"\n\tlocal _pamFile=\"$1\" _option=\"$2\" _value=\"$3\" _insert_lines_callback=\"$4\"\n\t#
      pam_faillock.so already present?\n\tif grep -q \"^auth.*pam_faillock.so.*\"
      \"$_pamFile\"; then\n\n\t\t# pam_faillock.so present, is the option present?\n\t\tif
      grep -q \"^auth.*[default=die].*pam_faillock.so.*authfail.*$_option=\" \"$_pamFile\";
      then\n\n\t\t\t# both pam_faillock.so &amp; option present, just correct option
      to the right value\n\t\t\tsed -i --follow-symlinks \"s/\\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\\)\\($_option
      *= *\\).*/\\1\\2$_value/\" \"$_pamFile\"\n\t\t\tsed -i --follow-symlinks \"s/\\(^auth.*[default=die].*pam_faillock.so.*authfail.*\\)\\($_option
      *= *\\).*/\\1\\2$_value/\" \"$_pamFile\"\n\n\t\t# pam_faillock.so present, but
      the option not yet\n\t\telse\n\n\t\t\t# append correct option value to appropriate
      places\n\t\t\tsed -i --follow-symlinks \"/^auth.*required.*pam_faillock.so.*preauth.*silent.*/
      s/$/ $_option=$_value/\" \"$_pamFile\"\n\t\t\tsed -i --follow-symlinks \"/^auth.*[default=die].*pam_faillock.so.*authfail.*/
      s/$/ $_option=$_value/\" \"$_pamFile\"\n\t\tfi\n\n\t# pam_faillock.so not present
      yet\n\telse\n\t\ttest -z \"$_insert_lines_callback\" || \"$_insert_lines_callback\"
      \"$_option\" \"$_value\" \"$_pamFile\"\n\t\t# insert pam_faillock.so preauth
      &amp; authfail rows with proper value of the option in question\n\tfi\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_create_audit_remediation_unsuccessful_file_modification_detailed\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function create_audit_remediation_unsuccessful_file_modification_detailed</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value>function create_audit_remediation_unsuccessful_file_modification_detailed
      {\n\tmkdir -p \"$(dirname \"$1\")\"\n\t# The - option to mark a here document
      limit string (&lt;&lt;-EOF) suppresses leading tabs (but not spaces) in the
      output.\n\tcat &lt;&lt;-EOF &gt; \"$1\"\n\t\t## This content is a section of
      an Audit config snapshot recommended for RHEL8 sytems that target OSPP compliance.\n\t\t##
      The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules\n\n\t\t##
      The purpose of these rules is to meet the requirements for Operating\n\t\t##
      System Protection Profile (OSPP)v4.2. These rules depends on having\n\t\t##
      10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.\n\n\t\t##
      Unsuccessful file creation (open with O_CREAT)\n\t\t-a always,exit -F arch=b32
      -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b64 -S
      openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F
      auid!=unset -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b32 -S open
      -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create\n\t\t-a
      always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b32 -S
      openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset
      -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b64 -S openat,open_by_handle_at
      -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create\n\t\t-a
      always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b64 -S
      open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create\n\t\t-a
      always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset
      -F key=unsuccesful-create\n\t\t-a always,exit -F arch=b64 -S creat -F exit=-EACCES
      -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create\n\t\t-a always,exit
      -F arch=b32 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create\n\t\t-a
      always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset
      -F key=unsuccesful-create\n\n\t\t## Unsuccessful file modifications (open for
      write or truncate)\n\t\t-a always,exit -F arch=b32 -S openat,open_by_handle_at
      -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a
      always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES
      -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a always,exit
      -F arch=b32 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset
      -F key=unsuccesful-modification\n\t\t-a always,exit -F arch=b64 -S open -F a1&amp;01003
      -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a
      always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM
      -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a always,exit
      -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-modification\n\t\t-a always,exit -F arch=b32
      -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a
      always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-modification\n\t\t-a always,exit -F arch=b32
      -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a
      always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-modification\n\t\t-a always,exit -F arch=b32
      -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification\n\t\t-a
      always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000
      -F auid!=unset -F key=unsuccesful-modification\n\n\t\t## Unsuccessful file access
      (any other opens) This has to go last.\n\t\t-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at
      -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access\n\t\t-a
      always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at
      -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access\n\t\t-a
      always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at
      -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access\n\t\t-a
      always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at
      -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access\n\tEOF\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_perform_audit_rules_privileged_commands_remediation\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function perform_audit_rules_privileged_commands_remediation</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># Function to perform
      remediation for ''audit_rules_privileged_commands'' rule\n#\n# Expects two arguments:\n#\n#
      audit_tool\t\ttool used to load audit rules\n# \t\t\tOne of ''auditctl'' or
      ''augenrules''\n#\n# min_auid\t\tMinimum original ID the user logged in with\n#
      \t\t\t''500'' for RHEL-6 and before, ''1000'' for RHEL-7 and after.\n#\n# Example
      Call(s):\n#\n#      perform_audit_rules_privileged_commands_remediation \"auditctl\"
      \"500\"\n#      perform_audit_rules_privileged_commands_remediation \"augenrules\"\t\"1000\"\n#\nfunction
      perform_audit_rules_privileged_commands_remediation {\n#\n# Load function arguments
      into local variables\nlocal tool=\"$1\"\nlocal min_auid=\"$2\"\n\n# Check sanity
      of the input\nif [ $# -ne \"2\" ]\nthen\n\techo \"Usage: perform_audit_rules_privileged_commands_remediation
      ''auditctl | augenrules'' ''500 | 1000''\"\n\techo \"Aborting.\"\n\texit 1\nfi\n\ndeclare
      -a files_to_inspect=()\n\n# Check sanity of the specified audit tool\nif [ \"$tool\"
      != ''auditctl'' ] &amp;&amp; [ \"$tool\" != ''augenrules'' ]\nthen\n\techo \"Unknown
      audit rules loading tool: $1. Aborting.\"\n\techo \"Use either ''auditctl''
      or ''augenrules''!\"\n\texit 1\n# If the audit tool is ''auditctl'', then:\n#
      * add ''/etc/audit/audit.rules''to the list of files to be inspected,\n# * specify
      ''/etc/audit/audit.rules'' as the output audit file, where\n#   missing rules
      should be inserted\nelif [ \"$tool\" == ''auditctl'' ]\nthen\n\tfiles_to_inspect=(\"/etc/audit/audit.rules\")\n\toutput_audit_file=\"/etc/audit/audit.rules\"\n#\n#
      If the audit tool is ''augenrules'', then:\n# * add ''/etc/audit/rules.d/*.rules''
      to the list of files to be inspected\n#   (split by newline),\n# * specify /etc/audit/rules.d/privileged.rules''
      as the output file, where\n#   missing rules should be inserted\nelif [ \"$tool\"
      == ''augenrules'' ]\nthen\n\treadarray -t files_to_inspect &lt; &lt;(find /etc/audit/rules.d
      -maxdepth 1 -type f -name ''*.rules'' -print)\n\toutput_audit_file=\"/etc/audit/rules.d/privileged.rules\"\nfi\n\n#
      Obtain the list of SUID/SGID binaries on the particular system (split by newline)\n#
      into privileged_binaries array\nreadarray -t privileged_binaries &lt; &lt;(find
      / -xdev -type f -perm -4000 -o -type f -perm -2000 2&gt;/dev/null)\n\n# Keep
      list of SUID/SGID binaries that have been already handled within some previous
      iteration\ndeclare -a sbinaries_to_skip=()\n\n# For each found sbinary in privileged_binaries
      list\nfor sbinary in \"${privileged_binaries[@]}\"\ndo\n\n\t# Check if this
      sbinary wasn''t already handled in some of the previous sbinary iterations\n\t#
      Return match only if whole sbinary definition matched (not in the case just
      prefix matched!!!)\n\tif [[ $(sed -ne \"\\|${sbinary}|p\" &lt;&lt;&lt; \"${sbinaries_to_skip[*]}\")
      ]]\n\tthen\n\t\t# If so, don''t process it second time &amp; go to process next
      sbinary\n\t\tcontinue\n\tfi\n\n\t# Reset the counter of inspected files when
      starting to check\n\t# presence of existing audit rule for new sbinary\n\tlocal
      count_of_inspected_files=0\n\n\t# Define expected rule form for this binary\n\texpected_rule=\"-a
      always,exit -F path=${sbinary} -F perm=x -F auid&gt;=${min_auid} -F auid!=unset
      -k privileged\"\n\n\t# If list of audit rules files to be inspected is empty,
      just add new rule and move on to next binary\n\tif [[ ${#files_to_inspect[@]}
      -eq 0 ]]; then\n\t\techo \"$expected_rule\" &gt;&gt; \"$output_audit_file\"\n\t\tcontinue\n\tfi\n\n\t#
      Replace possible slash ''/'' character in sbinary definition so we could use
      it in sed expressions below\n\tsbinary_esc=${sbinary//$''/''/$''\\/''}\n\n\t#
      For each audit rules file from the list of files to be inspected\n\tfor afile
      in \"${files_to_inspect[@]}\"\n\tdo\n\n\t\t# Search current audit rules file''s
      content for match. Match criteria:\n\t\t# * existing rule is for the same SUID/SGID
      binary we are currently processing (but\n\t\t#   can contain multiple -F path=
      elements covering multiple SUID/SGID binaries)\n\t\t# * existing rule contains
      all arguments from expected rule form (though can contain\n\t\t#   them in arbitrary
      order)\n\t\n\t\tbase_search=$(sed -e ''/-a always,exit/!d'' -e ''/-F path=''\"${sbinary_esc}\"''/!d''\t\t\\\n\t\t\t\t-e
      ''/-F path=[^[:space:]]\\+/!d''   -e ''/-F perm=.*/!d''\t\t\t\t\t\t\\\n\t\t\t\t-e
      ''/-F auid&gt;=''\"${min_auid}\"''/!d'' -e ''/-F auid!=\\(4294967295\\|unset\\)/!d''\t\\\n\t\t\t\t-e
      ''/-k \\|-F key=/!d'' \"$afile\")\n\n\t\t# Increase the count of inspected files
      for this sbinary\n\t\tcount_of_inspected_files=$((count_of_inspected_files +
      1))\n\n\t\t# Require execute access type to be set for existing audit rule\n\t\texec_access=''x''\n\n\t\t#
      Search current audit rules file''s content for presence of rule pattern for
      this sbinary\n\t\tif [[ $base_search ]]\n\t\tthen\n\n\t\t\t# Current audit rules
      file already contains rule for this binary =&gt;\n\t\t\t# Store the exact form
      of found rule for this binary for further processing\n\t\t\tconcrete_rule=$base_search\n\n\t\t\t#
      Select all other SUID/SGID binaries possibly also present in the found rule\n\n\t\t\treadarray
      -t handled_sbinaries &lt; &lt;(grep -o -e \"-F path=[^[:space:]]\\+\" &lt;&lt;&lt;
      \"$concrete_rule\")\n\t\t\thandled_sbinaries=(\"${handled_sbinaries[@]//-F path=/}\")\n\n\t\t\t#
      Merge the list of such SUID/SGID binaries found in this iteration with global
      list ignoring duplicates\n\t\t\treadarray -t sbinaries_to_skip &lt; &lt;(for
      i in \"${sbinaries_to_skip[@]}\" \"${handled_sbinaries[@]}\"; do echo \"$i\";
      done | sort -du)\n\n\t\t\t# Separate concrete_rule into three sections using
      hash ''#''\n\t\t\t# sign as a delimiter around rule''s permission section borders\n\t\t\tconcrete_rule=\"$(echo
      \"$concrete_rule\" | sed -n \"s/\\(.*\\)\\+\\(-F perm=[rwax]\\+\\)\\+/\\1#\\2#/p\")\"\n\n\t\t\t#
      Split concrete_rule into head, perm, and tail sections using hash ''#'' delimiter\n\n\t\t\trule_head=$(cut
      -d ''#'' -f 1 &lt;&lt;&lt; \"$concrete_rule\")\n\t\t\trule_perm=$(cut -d ''#''
      -f 2 &lt;&lt;&lt; \"$concrete_rule\")\n\t\t\trule_tail=$(cut -d ''#'' -f 3 &lt;&lt;&lt;
      \"$concrete_rule\")\n\n\t\t\t# Extract already present exact access type [r|w|x|a]
      from rule''s permission section\n\t\t\taccess_type=${rule_perm//-F perm=/}\n\n\t\t\t#
      Verify current permission access type(s) for rule contain ''x'' (execute) permission\n\t\t\tif
      ! grep -q \"$exec_access\" &lt;&lt;&lt; \"$access_type\"\n\t\t\tthen\n\n\t\t\t\t#
      If not, append the ''x'' (execute) permission to the existing access type bits\n\t\t\t\taccess_type=\"$access_type$exec_access\"\n\t\t\t\t#
      Reconstruct the permissions section for the rule\n\t\t\t\tnew_rule_perm=\"-F
      perm=$access_type\"\n\t\t\t\t# Update existing rule in current audit rules file
      with the new permission section\n\t\t\t\tsed -i \"s#${rule_head}\\(.*\\)${rule_tail}#${rule_head}${new_rule_perm}${rule_tail}#\"
      \"$afile\"\n\n\t\t\tfi\n\n\t\t# If the required audit rule for particular sbinary
      wasn''t found yet, insert it under following conditions:\n\t\t#\n\t\t# * in
      the \"auditctl\" mode of operation insert particular rule each time\n\t\t#   (because
      in this mode there''s only one file -- /etc/audit/audit.rules to be inspected
      for presence of this rule),\n\t\t#\n\t\t# * in the \"augenrules\" mode of operation
      insert particular rule only once and only in case we have already\n\t\t#   searched
      all of the files from /etc/audit/rules.d/*.rules location (since that audit
      rule can be defined\n\t\t#   in any of those files and if not, we want it to
      be inserted only once into /etc/audit/rules.d/privileged.rules file)\n\t\t#\n\t\telif
      [ \"$tool\" == \"auditctl\" ] || [[ \"$tool\" == \"augenrules\" &amp;&amp; $count_of_inspected_files
      -eq \"${#files_to_inspect[@]}\" ]]\n\t\tthen\n\n\t\t\t# Check if this sbinary
      wasn''t already handled in some of the previous afile iterations\n\t\t\t# Return
      match only if whole sbinary definition matched (not in the case just prefix
      matched!!!)\n\t\t\tif [[ ! $(sed -ne \"\\|${sbinary}|p\" &lt;&lt;&lt; \"${sbinaries_to_skip[*]}\")
      ]]\n\t\t\tthen\n\t\t\t\t# Current audit rules file''s content doesn''t contain
      expected rule for this\n\t\t\t\t# SUID/SGID binary yet =&gt; append it\n\t\t\t\techo
      \"$expected_rule\" &gt;&gt; \"$output_audit_file\"\n\t\t\tfi\n\n\t\t\tcontinue\n\t\tfi\n\n\tdone\n\ndone\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_fix_audit_syscall_rule\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function fix_audit_syscall_rule</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># Function to fix syscall
      audit rule for given system call. It is\n# based on example audit syscall rule
      definitions as outlined in\n# /usr/share/doc/audit-2.3.7/stig.rules file provided
      with the audit\n# package. It will combine multiple system calls belonging to
      the same\n# syscall group into one audit rule (rather than to create audit rule
      per\n# different system call) to avoid audit infrastructure performance penalty\n#
      in the case of ''one-audit-rule-definition-per-one-system-call''. See:\n#\n#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html\n#\n#
      for further details.\n#\n# Expects five arguments (each of them is required)
      in the form of:\n# * audit tool\t\t\t\ttool used to load audit rules,\n# \t\t\t\t\teither
      ''auditctl'', or ''augenrules\n# * audit rules'' pattern\t\taudit rule skeleton
      for same syscall\n# * syscall group\t\t\tgreatest common string this rule shares\n#
      \t\t\t\t\twith other rules from the same group\n# * architecture\t\t\tarchitecture
      this rule is intended for\n# * full form of new rule to add\texpected full form
      of audit rule as to be\n# \t\t\t\t\tadded into audit.rules file\n#\n# Note:
      The 2-th up to 4-th arguments are used to determine how many existing\n# audit
      rules will be inspected for resemblance with the new audit rule\n# (5-th argument)
      the function is going to add. The rule''s similarity check\n# is performed to
      optimize audit.rules definition (merge syscalls of the same\n# group into one
      rule) to avoid the \"single-syscall-per-audit-rule\" performance\n# penalty.\n#\n#
      Example call:\n#\n#\tSee e.g. ''audit_rules_file_deletion_events.sh'' remediation
      script\n#\nfunction fix_audit_syscall_rule {\n\n# Load function arguments into
      local variables\nlocal tool=\"$1\"\nlocal pattern=\"$2\"\nlocal group=\"$3\"\nlocal
      arch=\"$4\"\nlocal full_rule=\"$5\"\n\n# Check sanity of the input\nif [ $#
      -ne \"5\" ]\nthen\n\techo \"Usage: fix_audit_syscall_rule ''tool'' ''pattern''
      ''group'' ''arch'' ''full rule''\"\n\techo \"Aborting.\"\n\texit 1\nfi\n\n#
      Create a list of audit *.rules files that should be inspected for presence and
      correctness\n# of a particular audit rule. The scheme is as follows:\n# \n#
      -----------------------------------------------------------------------------------------\n#  Tool
      used to load audit rules | Rule already defined  |  Audit rules file to inspect    |\n#
      -----------------------------------------------------------------------------------------\n#        auditctl                |     Doesn''t
      matter    |  /etc/audit/audit.rules         |\n# -----------------------------------------------------------------------------------------\n#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |\n#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |\n#
      -----------------------------------------------------------------------------------------\n#\ndeclare
      -a files_to_inspect\n\nretval=0\n\n# First check sanity of the specified audit
      tool\nif [ \"$tool\" != ''auditctl'' ] &amp;&amp; [ \"$tool\" != ''augenrules''
      ]\nthen\n\techo \"Unknown audit rules loading tool: $1. Aborting.\"\n\techo
      \"Use either ''auditctl'' or ''augenrules''!\"\n\treturn 1\n# If audit tool
      is ''auditctl'', then add ''/etc/audit/audit.rules''\n# file to the list of
      files to be inspected\nelif [ \"$tool\" == ''auditctl'' ]\nthen\n\tfiles_to_inspect+=(''/etc/audit/audit.rules''
      )\n# If audit tool is ''augenrules'', then check if the audit rule is defined\n#
      If rule is defined, add ''/etc/audit/rules.d/*.rules'' to the list for inspection\n#
      If rule isn''t defined yet, add ''/etc/audit/rules.d/$key.rules'' to the list
      for inspection\nelif [ \"$tool\" == ''augenrules'' ]\nthen\n\t# Extract audit
      $key from audit rule so we can use it later\n\tkey=$(expr \"$full_rule\" : ''.*-k[[:space:]]\\([^[:space:]]\\+\\)''
      ''|'' \"$full_rule\" : ''.*-F[[:space:]]key=\\([^[:space:]]\\+\\)'')\n\treadarray
      -t matches &lt; &lt;(sed -s -n -e \"\\;${pattern};!d\" -e \"/${arch}/!d\" -e
      \"/${group}/!d;F\" /etc/audit/rules.d/*.rules)\n\tif [ $? -ne 0 ]\n\tthen\n\t\tretval=1\n\tfi\n\tfor
      match in \"${matches[@]}\"\n\tdo\n\t\tfiles_to_inspect+=(\"${match}\")\n\tdone\n\t#
      Case when particular rule isn''t defined in /etc/audit/rules.d/*.rules yet\n\tif
      [ ${#files_to_inspect[@]} -eq \"0\" ]\n\tthen\n\t\tfile_to_inspect=\"/etc/audit/rules.d/$key.rules\"\n\t\tfiles_to_inspect=(\"$file_to_inspect\")\n\t\tif
      [ ! -e \"$file_to_inspect\" ]\n\t\tthen\n\t\t\ttouch \"$file_to_inspect\"\n\t\t\tchmod
      0640 \"$file_to_inspect\"\n\t\tfi\n\tfi\nfi\n\n#\n# Indicator that we want to
      append $full_rule into $audit_file by default\nlocal append_expected_rule=0\n\nfor
      audit_file in \"${files_to_inspect[@]}\"\ndo\n\t# Filter existing $audit_file
      rules'' definitions to select those that:\n\t# * follow the rule pattern, and\n\t#
      * meet the hardware architecture requirement, and\n\t# * are current syscall
      group specific\n\treadarray -t existing_rules &lt; &lt;(sed -e \"\\;${pattern};!d\"
      -e \"/${arch}/!d\" -e \"/${group}/!d\"  \"$audit_file\")\n\tif [ $? -ne 0 ]\n\tthen\n\t\tretval=1\n\tfi\n\n\t#
      Process rules found case-by-case\n\tfor rule in \"${existing_rules[@]}\"\n\tdo\n\t\t#
      Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)\n\t\tif
      [ \"${rule}\" != \"${full_rule}\" ]\n\t\tthen\n\t\t\t# If so, isolate just ''(-S
      \\w)+'' substring of that rule\n\t\t\trule_syscalls=$(echo \"$rule\" | grep
      -o -P ''(-S \\w+ )+'')\n\t\t\t# Check if list of ''-S syscall'' arguments of
      that rule is subset\n\t\t\t# of ''-S syscall'' list of expected $full_rule\n\t\t\tif
      grep -q -- \"$rule_syscalls\" &lt;&lt;&lt; \"$full_rule\"\n\t\t\tthen\n\t\t\t\t#
      Rule is covered (i.e. the list of -S syscalls for this rule is\n\t\t\t\t# subset
      of -S syscalls of $full_rule =&gt; existing rule can be deleted\n\t\t\t\t# Thus
      delete the rule from audit.rules &amp; our array\n\t\t\t\tsed -i -e \"\\;${rule};d\"
      \"$audit_file\"\n\t\t\t\tif [ $? -ne 0 ]\n\t\t\t\tthen\n\t\t\t\t\tretval=1\n\t\t\t\tfi\n\t\t\t\texisting_rules=(\"${existing_rules[@]//$rule/}\")\n\t\t\telse\n\t\t\t\t#
      Rule isn''t covered by $full_rule - it besides -S syscall arguments\n\t\t\t\t#
      for this group contains also -S syscall arguments for other syscall\n\t\t\t\t#
      group. Example: ''-S lchown -S fchmod -S fchownat'' =&gt; group=''chown''\n\t\t\t\t#
      since ''lchown'' &amp; ''fchownat'' share ''chown'' substring\n\t\t\t\t# Therefore:\n\t\t\t\t#
      * 1) delete the original rule from audit.rules\n\t\t\t\t# (original ''-S lchown
      -S fchmod -S fchownat'' rule would be deleted)\n\t\t\t\t# * 2) delete the -S
      syscall arguments for this syscall group, but\n\t\t\t\t# keep those not belonging
      to this syscall group\n\t\t\t\t# (original ''-S lchown -S fchmod -S fchownat''
      would become ''-S fchmod''\n\t\t\t\t# * 3) append the modified (filtered) rule
      again into audit.rules\n\t\t\t\t# if the same rule not already present\n\t\t\t\t#\n\t\t\t\t#
      1) Delete the original rule\n\t\t\t\tsed -i -e \"\\;${rule};d\" \"$audit_file\"\n\t\t\t\tif
      [ $? -ne 0 ]\n\t\t\t\tthen\n\t\t\t\t\tretval=1\n\t\t\t\tfi\n\n\t\t\t\t# 2) Delete
      syscalls for this group, but keep those from other groups\n\t\t\t\t# Convert
      current rule syscall''s string into array splitting by ''-S'' delimiter\n\t\t\t\tIFS_BKP=\"$IFS\"\n\t\t\t\tIFS=$''-S''\n\t\t\t\tread
      -a rule_syscalls_as_array &lt;&lt;&lt; \"$rule_syscalls\"\n\t\t\t\t# Reset IFS
      back to default\n\t\t\t\tIFS=\"$IFS_BKP\"\n\t\t\t\t# Splitting by \"-S\" can''t
      be replaced by the readarray functionality easily\n\n\t\t\t\t# Declare new empty
      string to hold ''-S syscall'' arguments from other groups\n\t\t\t\tnew_syscalls_for_rule=''''\n\t\t\t\t#
      Walk through existing ''-S syscall'' arguments\n\t\t\t\tfor syscall_arg in \"${rule_syscalls_as_array[@]}\"\n\t\t\t\tdo\n\t\t\t\t\t#
      Skip empty $syscall_arg values\n\t\t\t\t\tif [ \"$syscall_arg\" == '''' ]\n\t\t\t\t\tthen\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tfi\n\t\t\t\t\t#
      If the ''-S syscall'' doesn''t belong to current group add it to the new list\n\t\t\t\t\t#
      (together with adding ''-S'' delimiter back for each of such item found)\n\t\t\t\t\tif
      grep -q -v -- \"$group\" &lt;&lt;&lt; \"$syscall_arg\"\n\t\t\t\t\tthen\n\t\t\t\t\t\tnew_syscalls_for_rule=\"$new_syscalls_for_rule
      -S $syscall_arg\"\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\t\t# Replace original ''-S
      syscall'' list with the new one for this rule\n\t\t\t\tupdated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}\n\t\t\t\t#
      Squeeze repeated whitespace characters in rule definition (if any) into one\n\t\t\t\tupdated_rule=$(echo
      \"$updated_rule\" | tr -s ''[:space:]'')\n\t\t\t\t# 3) Append the modified /
      filtered rule again into audit.rules\n\t\t\t\t#    (but only in case it''s not
      present yet to prevent duplicate definitions)\n\t\t\t\tif ! grep -q -- \"$updated_rule\"
      \"$audit_file\"\n\t\t\t\tthen\n\t\t\t\t\techo \"$updated_rule\" &gt;&gt; \"$audit_file\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\t#
      $audit_file already contains the expected rule form for this\n\t\t\t# architecture
      &amp; key =&gt; don''t insert it second time\n\t\t\tappend_expected_rule=1\n\t\tfi\n\tdone\n\n\t#
      We deleted all rules that were subset of the expected one for this arch &amp;
      key.\n\t# Also isolated rules containing system calls not from this system calls
      group.\n\t# Now append the expected rule if it''s not present in $audit_file
      yet\n\tif [[ ${append_expected_rule} -eq \"0\" ]]\n\tthen\n\t\techo \"$full_rule\"
      &gt;&gt; \"$audit_file\"\n\tfi\ndone\n\nreturn $retval\n\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_populate\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function populate</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># The populate function
      isn''t directly used by SSG at the moment but it can be \n# used for testing
      purposes and will be used in SSG Testsuite in the future.\n\nfunction populate
      {\n# code to populate environment variables needed (for unit testing)\nif [
      -z \"${!1}\" ]; then\n\techo \"$1 is not defined. Exiting.\"\n\texit\nfi\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_include_mount_options_functions\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function include_mount_options_functions</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value>function include_mount_options_functions
      {\n\t:\n}\n\n# $1: type of filesystem\n# $2: new mount point option\n# $3: filesystem
      of new mount point (used when adding new entry in fstab)\n# $4: mount type of
      new mount point (used when adding new entry in fstab)\nfunction ensure_mount_option_for_vfstype
      {\n        local _vfstype=\"$1\" _new_opt=\"$2\" _filesystem=$3 _type=$4 _vfstype_points=()\n        readarray
      -t _vfstype_points &lt; &lt;(grep -E \"[[:space:]]${_vfstype}[[:space:]]\" /etc/fstab
      | awk ''{print $2}'')\n\n        for _vfstype_point in \"${_vfstype_points[@]}\"\n        do\n                ensure_mount_option_in_fstab
      \"$_vfstype_point\" \"$_new_opt\" \"$_filesystem\" \"$_type\"\n        done\n}\n\n#
      $1: mount point\n# $2: new mount point option\n# $3: device or virtual string
      (used when adding new entry in fstab)\n# $4: mount type of mount point (used
      when adding new entry in fstab)\nfunction ensure_mount_option_in_fstab {\n\tlocal
      _mount_point=\"$1\" _new_opt=\"$2\" _device=$3 _type=$4\n\tlocal _mount_point_match_regexp=\"\"
      _previous_mount_opts=\"\"\n\t_mount_point_match_regexp=\"$(get_mount_point_regexp
      \"$_mount_point\")\"\n\n\tif [ \"$(grep -c \"$_mount_point_match_regexp\" /etc/fstab)\"
      -eq 0 ]; then\n\t\t# runtime opts without some automatic kernel/userspace-added
      defaults\n\t\t_previous_mount_opts=$(grep \"$_mount_point_match_regexp\" /etc/mtab
      | head -1 |  awk ''{print $4}'' \\\n\t\t\t\t\t| sed -E \"s/(rw|defaults|seclabel|${_new_opt})(,|$)//g;s/,$//\")\n\t\t[
      \"$_previous_mount_opts\" ] &amp;&amp; _previous_mount_opts+=\",\"\n\t\techo
      \"${_device} ${_mount_point} ${_type} defaults,${_previous_mount_opts}${_new_opt}
      0 0\" &gt;&gt; /etc/fstab\n\telif [ \"$(grep \"$_mount_point_match_regexp\"
      /etc/fstab | grep -c \"$_new_opt\")\" -eq 0 ]; then\n\t\t_previous_mount_opts=$(grep
      \"$_mount_point_match_regexp\" /etc/fstab | awk ''{print $4}'')\n\t\tsed -i
      \"s|\\(${_mount_point_match_regexp}.*${_previous_mount_opts}\\)|\\1,${_new_opt}|\"
      /etc/fstab\n\tfi\n}\n\n# $1: mount point\nfunction get_mount_point_regexp {\n\t\tprintf
      \"[[:space:]]%s[[:space:]]\" \"$1\"\n}\n\n# $1: mount point\nfunction assert_mount_point_in_fstab
      {\n\tlocal _mount_point_match_regexp\n\t_mount_point_match_regexp=\"$(get_mount_point_regexp
      \"$1\")\"\n\tgrep \"$_mount_point_match_regexp\" -q /etc/fstab \\\n\t\t|| {
      echo \"The mount point ''$1'' is not even in /etc/fstab, so we can''t set up
      mount options\" &gt;&amp;2; return 1; }\n}\n\n# $1: mount point\nfunction remove_defaults_from_fstab_if_overriden
      {\n\tlocal _mount_point_match_regexp\n\t_mount_point_match_regexp=\"$(get_mount_point_regexp
      \"$1\")\"\n\tif grep \"$_mount_point_match_regexp\" /etc/fstab | grep -q \"defaults,\"\n\tthen\n\t\tsed
      -i \"s|\\(${_mount_point_match_regexp}.*\\)defaults,|\\1|\" /etc/fstab\n\tfi\n}\n\n#
      $1: mount point\nfunction ensure_partition_is_mounted {\n\tlocal _mount_point=\"$1\"\n\tmkdir
      -p \"$_mount_point\" || return 1\n\tif mountpoint -q \"$_mount_point\"; then\n\t\tmount
      -o remount --target \"$_mount_point\"\n\telse\n\t\tmount --target \"$_mount_point\"\n\tfi\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_replace_or_append\"
      operator=\"equals\" prohibitChanges=\"true\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">Remediation function replace_or_append</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Shared bash remediation function. Not intended to be changed
      by tailoring.</ns9:description>\n          <ns9:value># Function to replace
      configuration setting in config file or add the configuration setting if\n#
      it does not exist.\n#\n# Expects arguments:\n#\n# config_file:\t\tConfiguration
      file that will be modified\n# key:\t\t\tConfiguration option to change\n# value:\t\tValue
      of the configuration option to change\n# cce:\t\t\tThe CCE identifier or ''@CCENUM@''
      if no CCE identifier exists\n# format:\t\tThe printf-like format string that
      will be given stripped key and value as arguments,\n#\t\t\tso e.g. ''%s=%s''
      will result in key=value subsitution (i.e. without spaces around =)\n#\n# Optional
      arugments:\n#\n# format:\t\tOptional argument to specify the format of how key/value
      should be\n# \t\t\tmodified/appended in the configuration file. The default
      is key = value.\n#\n# Example Call(s):\n#\n#     With default format of ''key
      = value'':\n#     replace_or_append ''/etc/sysctl.conf'' ''^kernel.randomize_va_space''
      ''2'' ''@CCENUM@''\n#\n#     With custom key/value format:\n#     replace_or_append
      ''/etc/sysconfig/selinux'' ''^SELINUX='' ''disabled'' ''@CCENUM@'' ''%s=%s''\n#\n#     With
      a variable:\n#     replace_or_append ''/etc/sysconfig/selinux'' ''^SELINUX=''
      $var_selinux_state ''@CCENUM@'' ''%s=%s''\n#\nfunction replace_or_append {\n  local
      default_format=''%s = %s'' case_insensitive_mode=yes sed_case_insensitive_option=''''
      grep_case_insensitive_option=''''\n  local config_file=$1\n  local key=$2\n  local
      value=$3\n  local cce=$4\n  local format=$5\n\n  if [ \"$case_insensitive_mode\"
      = yes ]; then\n    sed_case_insensitive_option=\"i\"\n    grep_case_insensitive_option=\"-i\"\n  fi\n  [
      -n \"$format\" ] || format=\"$default_format\"\n  # Check sanity of the input\n  [
      $# -ge \"3\" ] || { echo \"Usage: replace_or_append &lt;config_file_location&gt;
      &lt;key_to_search&gt; &lt;new_value&gt; [&lt;CCE number or literal ''@CCENUM@''
      if unknown&gt;] [printf-like format, default is ''$default_format'']\" &gt;&amp;2;
      exit 1; }\n\n  # Test if the config_file is a symbolic link. If so, use --follow-symlinks
      with sed.\n  # Otherwise, regular sed command will do.\n  sed_command=(''sed''
      ''-i'')\n  if test -L \"$config_file\"; then\n    sed_command+=(''--follow-symlinks'')\n  fi\n\n  #
      Test that the cce arg is not empty or does not equal @CCENUM@.\n  # If @CCENUM@
      exists, it means that there is no CCE assigned.\n  if [ -n \"$cce\" ] &amp;&amp;
      [ \"$cce\" != ''@CCENUM@'' ]; then\n    cce=\"${cce}\"\n  else\n    cce=\"CCE\"\n  fi\n\n  #
      Strip any search characters in the key arg so that the key can be replaced without\n  #
      adding any search characters to the config file.\n  stripped_key=$(sed ''s/[\\^=\\$,;+]*//g''
      &lt;&lt;&lt; \"$key\")\n\n  # shellcheck disable=SC2059\n  printf -v formatted_output
      \"$format\" \"$stripped_key\" \"$value\"\n\n  # If the key exists, change it.
      Otherwise, add it to the config_file.\n  # We search for the key string followed
      by a word boundary (matched by \\&gt;),\n  # so if we search for ''setting'',
      ''setting2'' won''t match.\n  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option
      -e \"${key}\\\\&gt;\" \"$config_file\"; then\n    \"${sed_command[@]}\" \"s/${key}\\\\&gt;.*/$formatted_output/g$sed_case_insensitive_option\"
      \"$config_file\"\n  else\n    # \\n is precaution for case where file ends without
      trailing newline\n    printf ''\\n# Per %s: Set %s in %s\\n'' \"$cce\" \"$formatted_output\"
      \"$config_file\" &gt;&gt; \"$config_file\"\n    printf ''%s\\n'' \"$formatted_output\"
      &gt;&gt; \"$config_file\"\n  fi\n}</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      hidden=\"true\" id=\"xccdf_org.ssgproject.content_value_function_die\" operator=\"equals\"
      prohibitChanges=\"true\" type=\"string\">\n          <ns9:title xml:lang=\"en-US\">Remediation
      function die</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Shared
      bash remediation function. Not intended to be changed by tailoring.</ns9:description>\n          <ns9:value>#
      Print a message to stderr and exit the shell\n# $1: The message to print.\n#
      $2: The error code (optional, default is 1)\nfunction die {\n\tlocal _message=\"$1\"
      _rc=\"${2:-1}\"\n\tprintf ''%s\\n'' \"$_message\" &gt;&amp;2\n\texit \"$_rc\"\n}</ns9:value>\n        </ns9:Value>\n      </ns9:Group>\n      <ns9:Group
      id=\"xccdf_org.ssgproject.content_group_firefox\">\n        <ns9:title xml:lang=\"en-US\">Firefox</ns9:title>\n        <ns9:description
      xml:lang=\"en-US\">Firefox is an open-source web browser and developed by Mozilla.\nWeb
      browsers such as Firefox are used for a number of reasons. This section\nprovides
      settings for configuring Firefox policies to meet compliance\nsettings for Firefox
      running on Red Hat Enterprise Linux systems.\n\n<html:ul>Refer to <html:li><html:a
      href=\"http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries\">http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries</html:a></html:li>\nfor
      a list of currently supported Firefox settings.</html:ul></ns9:description>\n        <ns9:Value
      id=\"xccdf_org.ssgproject.content_value_var_required_file_types\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">The Default Required Firefox File Types</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">The default required file types that need to request usage\nconfirmation
      in Firefox.</ns9:description>\n          <ns9:value>application/pdf,application/doc,application/xls,application/bat,application/ppt,application/mdb,application/mde,application/fdf,application/xfdf,application/lsl,application/lso,appliation/lss,application/iqy,application/rqy,application/xlk,application/pot,application/pps,application/dot,application/wbk,application/ps,application/eps,application/wch,application/wcm,application/wbi,application/wb1,application/wb3,application/rtf,application/wch,application/wcm,application/ad,application/adp,application/xlt,application/dos,application/wks</ns9:value>\n        </ns9:Value>\n        <ns9:Value
      id=\"xccdf_org.ssgproject.content_value_var_default_home_page\" type=\"string\">\n          <ns9:title
      xml:lang=\"en-US\">The Default Firefox Home Page</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">The default home page for Firefox users.</ns9:description>\n          <ns9:value
      selector=\"about_blank\">about:blank</ns9:value>\n          <ns9:value>None</ns9:value>\n        </ns9:Value>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-home_page\" selected=\"false\"
      severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Default Firefox
      Home Page Configured</ns9:title>\n          <ns9:description xml:lang=\"en-US\">The
      default home page is set to a vendor''s defined website or\nFirefox''s own website.
      This can be changed to an organizationally defined website\nor <html:code>about:blank</html:code>.
      To set the default home page, set\n<html:code>browser.startup.homepage</html:code>
      to <html:code><ns9:sub idref=\"xccdf_org.ssgproject.content_value_var_default_home_page\"
      use=\"legacy\"/></html:code>.</ns9:description>\n          <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF017</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">The browser home page parameter specifies the web page that
      is to be\ndisplayed when the browser is started explicitly and when product-specific\nbuttons
      or key sequences for the home page are accessed. This helps to\nmitigate the
      possibility of automatic inadvertent execution of scripts \nadded to a previously
      safe site.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-home_page\"
      system=\"urn:xccdf:fix:script:sh\">\nvar_default_home_page=\"<ns9:sub idref=\"xccdf_org.ssgproject.content_value_var_default_home_page\"
      use=\"legacy\"/>\"\n\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"\\\"${var_default_home_page}\\\"\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"browser.startup.homepage\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"browser.startup.homepage\".*/lockPref(\"browser.startup.homepage\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"browser.startup.homepage\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-export
      export-name=\"oval:ssg-var_default_home_page:var:1\" value-id=\"xccdf_org.ssgproject.content_value_var_default_home_page\"/>\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-home_page:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-home_page_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-non-secure_page_warning\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Enable
      Non-Secure Page Warnings</ns9:title>\n          <ns9:description xml:lang=\"en-US\">When
      users browse websites, web pages can switch in between secure and \nnon-secure
      protocols. Users can be warned each time by\nsetting <html:code>security.warn_leaving_secure</html:code>
      to <html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF130</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Users may not be aware that the information being viewed
      under secure\nconditions in a previous page are not currently being viewed under\nthe
      same security settings.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-non-secure_page_warning\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"security.warn_leaving_secure\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"security.warn_leaving_secure\".*/lockPref(\"security.warn_leaving_secure\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"security.warn_leaving_secure\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-non-secure_page_warning:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-non-secure_page_warning_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_3\" selected=\"false\"
      severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable SSL Version
      3.0 in Firefox</ns9:title>\n          <ns9:description xml:lang=\"en-US\">SSL
      version 3.0 is vulnerable and should be disabled by setting\n<html:code>security.enable_ssl3</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF020</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Earlier versions of SSL have known security vulnerabilities
      and are not\nauthorized for use in DOD.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-ssl_version_3\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"security.enable_ssl3\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"security.enable_ssl3\".*/lockPref(\"security.enable_ssl3\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"security.enable_ssl3\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-ssl_version_3:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-ssl_version_3_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-password_store\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      the Firefox Password Store</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      allows users to store passwords whether or not a master password\nis set for
      the password store. To disable the storing of passwords, set\n<html:code>signon.rememberSignons</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF160</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Autofill of a password can be enabled when a site is visited.
      This feature could also\nbe used to autofill the certificate pin which could
      lead to compromise of DoD information.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-password_store\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"signon.rememberSignons\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"signon.rememberSignons\".*/lockPref(\"signon.rememberSignons\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"signon.rememberSignons\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-password_store:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-password_store_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_installed_firefox_version_supported\"
      selected=\"false\" severity=\"high\">\n          <ns9:title xml:lang=\"en-US\">Supported
      Version of Firefox Installed</ns9:title>\n          <ns9:description xml:lang=\"en-US\">If
      the system is joined to the Red Hat Network, a Red Hat Satellite Server,\nor
      a yum server, run the following command to install updates:\n<html:pre>$ sudo
      yum update</html:pre>\nIf the system is not configured to use one of these sources,
      updates (in the form of RPM packages)\ncan be manually downloaded and installed
      using <html:code>rpm</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">DCMC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF003</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Use of versions of an application which are not supported
      by the vendor\nare not permitted. Vendors respond to security flaws with updates
      and\npatches. These updates are not available for unsupported version which\ncan
      leave the application vulnerable to attack.</ns9:rationale>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-installed_firefox_version_supported:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      Automatic Downloads of MIME Types</ns9:title>\n          <ns9:description xml:lang=\"en-US\">MIME
      type files are automatically downloaded or executed in Firefox. This\ncan be
      disabled by setting <html:code>browser.helperApps.alwaysAsk.force</html:code>
      to\n<html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">DCMC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF100</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">The default action for file types for which a plugin is installed
      is to\nautomatically download and execute the file using the associated plugin.\nFirefox
      allows users to change the specified download action so that the\nfile is opened
      with a selected external application or saved to disk\ninstead.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-auto-download_actions\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"browser.helperApps.alwaysAsk.force\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"browser.helperApps.alwaysAsk.force\".*/lockPref(\"browser.helperApps.alwaysAsk.force\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"browser.helperApps.alwaysAsk.force\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-auto-download_actions:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_context_menus\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      JavaScript Context Menus</ns9:title>\n          <ns9:description xml:lang=\"en-US\">JavaScript
      can configure and make changes to the web browser''s appearance by\nspecifically
      disabling or replacing context menus. This can be disabled by\nsetting <html:code>dom.event.contextmenu.enabled</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF183</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">A website may execute JavaScript that can make changes to
      these\ncontext menus. This can help disguise an attack.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-javascript_context_menus\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.event.contextmenu.enabled\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.event.contextmenu.enabled\".*/lockPref(\"dom.event.contextmenu.enabled\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.event.contextmenu.enabled\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-javascript_context_menus:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-javascript_context_menus_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-open_confirmation\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Enable
      Downloading and Opening File Confirmation</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">To have an action dialog box appear promping users what action
      to take when\ncertain types of files are downloaded or opened, set\n<html:code>plugin.disable_full_page_plugin_for_types</html:code>
      to\n<html:code><ns9:sub idref=\"xccdf_org.ssgproject.content_value_var_required_file_types\"
      use=\"legacy\"/></html:code>.</ns9:description>\n          <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF110</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">When the user receives a dialog box asking if they want to
      save the file\nor open it with a specified application, this indicates that
      a plugin does\nnot exist. Also, the user has not previously selected a download
      action or helper\napplication to automatically use for that type of file. When
      prompted, if the user\nchecks the option to ''Do this automatically for files
      like this from now on'', then\nan entry will appear for that type of file in
      the plugins listing, and this file\ntype is automatically opened in the future.
      This can be a security issue. New file\ntypes cannot be added directly to the
      Application plugin listing.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-open_confirmation\"
      system=\"urn:xccdf:fix:script:sh\">\nvar_required_file_types=\"<ns9:sub idref=\"xccdf_org.ssgproject.content_value_var_required_file_types\"
      use=\"legacy\"/>\"\n\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"\\\"${var_required_file_types}\\\"\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"plugin.disable_full_page_plugin_for_types\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s|lockPref(\"plugin.disable_full_page_plugin_for_types\".*|lockPref(\"plugin.disable_full_page_plugin_for_types\",
      ''\"$value)\"'';|g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"plugin.disable_full_page_plugin_for_types\", ''\"$value\"'');''
      &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-export
      export-name=\"oval:ssg-var_required_file_types:var:1\" value-id=\"xccdf_org.ssgproject.content_value_var_required_file_types\"/>\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-open_confirmation:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-open_confirmation_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-verification\" selected=\"false\"
      severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Enable Certificate
      Verification</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      can be configured to prompt the user to choose a certificate\nto present to
      a website when asked. To enable certificate verification, \nset <html:code>security.default_personal_cert</html:code>
      to <html:code>Ask Every Time</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF050</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Websites within DoD require user authentication for access
      which increases\nsecurity for DoD information. Access will be denied to the
      user if\ncertificate management is not configured.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-verification\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"\\\"Ask
      Every Time\\\"\"\nfirefox_dirs=\"/usr/lib/firefox /usr/lib64/firefox /usr/local/lib/firefox
      /usr/local/lib64/firefox\"\n\n# Check the possible Firefox install directories\nfor
      firefox_dir in ${firefox_dirs}; do\n    # If the Firefox directory exists, then
      Firefox is installed\n    if [ -d \"${firefox_dir}\" ]; then\n        # Make
      sure the Firefox .cfg file exists and has the appropriate permissions\n        if
      ! [ -f \"${firefox_dir}/${firefox_cfg}\" ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"security.default_personal_cert\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"security.default_personal_cert\".*/lockPref(\"security.default_personal_cert\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"security.default_personal_cert\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-verification:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-verification_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_resizing\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      JavaScript''s Moving Or Resizing Windows Capability</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">JavaScript can configure and make changes to the web browser''s
      appearance by\nspecifically moving and resizing browser windows. This can be
      disabled by\nsetting <html:code>dom.disable_window_move_resize</html:code> to
      <html:code>true</html:code>.</ns9:description>\n          <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF181</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">JavaScript can make changes to the browser&#x2019;s appearance.
      This activity\ncan help disguise an attack taking place in a minimized background
      window.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-javascript_window_resizing\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.disable_window_move_resize\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.disable_window_move_resize\".*/lockPref(\"dom.disable_window_move_resize\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.disable_window_move_resize\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-javascript_window_resizing:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-javascript_window_resizing_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-search_update\" selected=\"false\"
      severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable Installed
      Search Plugins Update Checking</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      automatically checks for updated versions of search plugins.\nTo disable the
      automatic updates of plugins, set\n<html:code>browser.search.update</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF085</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Updates need to be controlled and installed from authorized
      and trusted servers.\nThis setting overrides a number of other settings which
      may direct the application\nto access external URLs.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-search_update\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"browser.search.update\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"browser.search.update\".*/lockPref(\"browser.search.update\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"browser.search.update\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-search_update:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-search_update_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_forms\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      Autofill Form Assistance</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      provides tools to auto-fill forms from prefilled information.\nThis can be disabled
      by setting <html:code>browser.formfill.enable</html:code> to\n<html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF140</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">In order to protect privacy and sensitive data, Firefox provides\nthe
      ability to configure Firefox such that data entered into forms\nis not saved.
      This mitigates the risk of a website gleaning private\ninformation from prefilled
      information.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-autofill_forms\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"browser.formfill.enable\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"browser.formfill.enable\".*/lockPref(\"browser.formfill.enable\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"browser.formfill.enable\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-autofill_forms:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-autofill_forms_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-shell_protocol\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      Firefox Access to Shell Protocols</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Access
      to the shell is disabled by default but can be changed.\nTo prevent shell access
      from being enabled, set\n<html:code>network.protocol-handler.external.shell</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF105</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">If enabled, this setting would allow the browser to access
      the Windows shell.\nThis could allow access to the underlying system.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-shell_protocol\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"network.protocol-handler.external.shell\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"network.protocol-handler.external.shell\".*/lockPref(\"network.protocol-handler.external.shell\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"network.protocol-handler.external.shell\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-shell_protocol:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-shell_protocol_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-addons_plugin_updates\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      Addons Plugin Updates</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      automatically updates installed add-ons and plugins which \ncan be disabled
      by setting <html:code>extensions.update.enabled</html:code> to\n<html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF090</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Automatic updates from untrusted sites puts the enclave at\nrisk
      of attack and may override security settings.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-addons_plugin_updates\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"extensions.update.enabled\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"extensions.update.enabled\".*/lockPref(\"extensions.update.enabled\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"extensions.update.enabled\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-addons_plugin_updates:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-addons_plugin_updates_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-autofill_passwords\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      User Ability To Autofill Passwords</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      automatically allows users to save passwords to be auto-filled\ninto password
      forms. This can be disabled by setting\n<html:code>signon.prefillForms</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF150</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">While on the internet, it may be possible for an attacker
      to view\nthe saved password files and gain access to the user''s accounts on\nvarious
      hosts.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-autofill_passwords\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"signon.prefillForms\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"signon.prefillForms\".*/lockPref(\"signon.prefillForms\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"signon.prefillForms\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-autofill_passwords:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-autofill_passwords_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_version_2\" selected=\"false\"
      severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable SSL Version
      2.0 in Firefox</ns9:title>\n          <ns9:description xml:lang=\"en-US\">SSL
      version 2 is not enabled by default and should not be enabled.\nTo prevent SSL
      version 2 from being enabled set\n<html:code>security.enable_ssl2</html:code>
      to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF010</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Use of versions prior to TLS 1.0 are not permitted because
      these versions are\nnon-standard. SSL 2.0 and SSL 3.0 contain a number of security
      flaws.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-ssl_version_2\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"security.enable_ssl2\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"security.enable_ssl2\".*/lockPref(\"security.enable_ssl2\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"security.enable_ssl2\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-ssl_version_2:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-ssl_version_2_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-ssl_protocol_tls\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Enable
      TLS Usage in Firefox</ns9:title>\n          <ns9:description xml:lang=\"en-US\">To
      enable TLS, set <html:code>security.enable_tls</html:code> to <html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF030</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Earlier versions of SSL have known security vulnerabilities
      and are not\nauthorized for use in DOD environments.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-ssl_protocol_tls\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"security.enable_tls\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"security.enable_tls\".*/lockPref(\"security.enable_tls\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"security.enable_tls\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-ssl_protocol_tls:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-ssl_protocol_tls_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_text\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      JavaScript''s Ability To Modify The Browser Appearance</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">JavaScript can configure and make changes to the web browser''s
      appearance by\nspecifically hiding the status bar from view. This can disabled
      by \nsetting <html:code>dom.disable_window_open_feature.status</html:code> to
      <html:code>true</html:code>.</ns9:description>\n          <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF185</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">JavaScript can make changes to the browser&#x2019;s appearance.
      This activity\ncan help disguise an attack taking place in a minimized background
      window.\nWebpage authors can disable many features of a popup window that they
      open.\nThis setting prevents the status bar from being hidden.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-javascript_status_bar_text\" system=\"urn:xccdf:fix:script:sh\">\n\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.disable_window_open_feature.status\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.disable_window_open_feature.status\".*/lockPref(\"dom.disable_window_open_feature.status\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.disable_window_open_feature.status\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-javascript_status_bar_text:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-javascript_status_bar_text_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_window_changes\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      JavaScript''s Raise Or Lower Windows Capability</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">JavaScript can configure and make changes to the web browser''s
      appearance by\nspecifically raising and lowering windows. This can be disabled
      by\nsetting <html:code>dom.disable_window_flip</html:code> to <html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF182</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">JavaScript can make changes to the browser&#x2019;s appearance.
      Allowing a website\nto use JavaScript to raise and lower browser windows may
      disguise an attack.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-javascript_window_changes\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.disable_window_flip\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.disable_window_flip\".*/lockPref(\"dom.disable_window_flip\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.disable_window_flip\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-javascript_window_changes:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-javascript_window_changes_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-javascript_status_bar_changes\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      JavaScript''s Ability To Change The Status Bar</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">JavaScript can configure and make changes to the web browser''s
      appearance by\nspecifically hiding or changing the status bar. This can be disabled
      by\nsetting <html:code>dom.disable_window_status_change</html:code> to <html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF184</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">When a user visits some webpages, JavaScript can hide or
      make changes\nto the browser&#x2019;s appearance to hide unauthorized activity.
      This activity\ncan help disguise an attack taking place in a minimized background
      window.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-javascript_status_bar_changes\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.disable_window_status_change\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.disable_window_status_change\".*/lockPref(\"dom.disable_window_status_change\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.disable_window_status_change\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-javascript_status_bar_changes:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-javascript_status_bar_changes_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-auto-update_of_firefox\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Disable
      Firefox Auto-Update Capability</ns9:title>\n          <ns9:description xml:lang=\"en-US\">Firefox
      can be set to automatically update as new updates. This can be\ndisabled by
      setting <html:code>app.update.enable</html:code> to <html:code>false</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF080</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Allowing software updates from non-trusted sites can introduce
      settings\nthat will override a secured installation of the application. This
      can\nplace DoD information at risk. If this setting is enabled, then there are\nmany
      other default settings which point to untrusted sites which must be\nchanged
      to point to an authorized update site that is not publicly accessible.</ns9:rationale>\n          <ns9:fix
      id=\"firefox_preferences-auto-update_of_firefox\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"app.update.enabled\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"app.update.enabled\".*/lockPref(\"app.update.enabled\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"app.update.enabled\", ''\"$value\"'');'' &gt;&gt; \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-auto-update_of_firefox:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-auto-update_of_firefox_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-pop-up_windows\"
      selected=\"false\" severity=\"medium\">\n          <ns9:title xml:lang=\"en-US\">Enable
      Firefox Pop-up Blocker</ns9:title>\n          <ns9:description xml:lang=\"en-US\">The
      pop-up blocker can be enabled by setting\n<html:code>dom.disable_window_open_feature.status</html:code>
      to <html:code>true</html:code>.</ns9:description>\n          <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n          <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF180</ns9:reference>\n          <ns9:rationale
      xml:lang=\"en-US\">Popup windows may be used to launch an attack within a new
      browser window\nwith altered settings.</ns9:rationale>\n          <ns9:fix id=\"firefox_preferences-pop-up_windows\"
      system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"dom.disable_window_open_feature.status\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"dom.disable_window_open_feature.status\".*/lockPref(\"dom.disable_window_open_feature.status\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"dom.disable_window_open_feature.status\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n          <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-pop-up_windows:def:1\"/>\n          </ns9:check>\n          <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n            <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-pop-up_windows_ocil:questionnaire:1\"/>\n          </ns9:check>\n        </ns9:Rule>\n        <ns9:Group
      id=\"xccdf_org.ssgproject.content_group_firefox_preferences-lock_settings\">\n          <ns9:title
      xml:lang=\"en-US\">Prevent Users from Changing Firefox Configuration Settings</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Firefox required security preferences cannot be changed by
      users.</ns9:description>\n          <ns9:Rule id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_config_file\"
      selected=\"false\" severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">Set
      Firefox Configuration File Location</ns9:title>\n            <ns9:description
      xml:lang=\"en-US\">Specify the Firefox configuration file location by setting
      \n<html:code>general.config.filename</html:code> to the configuration (i.e.
      <html:code>mozilla.cfg</html:code>)\nfilename that contains the Firefox security
      preferences.</ns9:description>\n            <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n            <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF070</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">Locked settings prevents users from accessing about:config
      and changing\nthe security settings set by the system administrator.</ns9:rationale>\n            <ns9:fix
      id=\"firefox_preferences-lock_settings_config_file\" system=\"urn:xccdf:fix:script:sh\">\n\nvalue=\"\\\"stig.cfg\\\"\"\nfirefox_js=\"stig_settings.js\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\nfirefox_pref=\"/defaults/pref\"\nfirefox_preferences=\"/defaults/preferences\"\n\n#
      Check the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Different versions of Firefox have
      different preferences directories, check for them and set the right one\n        if
      [ -d \"${firefox_dir}/${firefox_pref}\" ] ; then\n            firefox_pref_dir=\"${firefox_dir}/${firefox_pref}\"\n        elif
      [ -d \"${firefox_dir}/${firefox_preferences}\" ] ; then\n            firefox_pref_dir=\"${firefox_dir}/${firefox_preferences}\"\n        else\n            mkdir
      -m 755 -p \"${firefox_dir}/${firefox_preferences}\"\n            firefox_pref_dir=\"${firefox_dir}/${firefox_preferences}\"\n        fi\n\n        #
      Make sure the Firefox .js file exists and has the appropriate permissions\n        if
      ! [ -f \"${firefox_pref_dir}/${firefox_js}\" ] ; then\n            touch \"${firefox_pref_dir}/${firefox_js}\"\n            chmod
      644 \"${firefox_pref_dir}/${firefox_js}\"\n        fi\n\n        # If the key
      exists, change it. Otherwise, add it to the config_file.\n        if LC_ALL=C
      grep -m 1 -q ''^pref(\"general.config.filename\", '' \"${firefox_pref_dir}/${firefox_js}\";
      then\n            sed -i ''s/pref(\"general.config.filename\".*/pref(\"general.config.filename\",
      ''\"$value)\"'';/g'' \"${firefox_pref_dir}/${firefox_js}\"\n        else\n            echo
      ''pref(\"general.config.filename\", ''\"$value\"'');'' &gt;&gt; \"${firefox_pref_dir}/${firefox_js}\"\n        fi\n    fi\ndone\n</ns9:fix>\n            <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-lock_settings_config_file:def:1\"/>\n            </ns9:check>\n            <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-lock_settings_config_file_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n          <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-lock_settings_obscure\"
      selected=\"false\" severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">Disable
      Firefox Configuration File ROT-13 Encoding</ns9:title>\n            <ns9:description
      xml:lang=\"en-US\">Disable ROT-13 encoding by setting <html:code>general.config.obscure_value</html:code>\nto
      <html:code>0</html:code>.</ns9:description>\n            <ns9:reference href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n            <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF070</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">ROT-13 encoded prevents system adminstrators from easily
      configuring\nand deploying Firefox configuration settings. It also prevents
      validating\nsettings easily from automated security tools.</ns9:rationale>\n            <ns9:fix
      id=\"firefox_preferences-lock_settings_obscure\" system=\"urn:xccdf:fix:script:sh\">\n\nvalue=\"0\"\nfirefox_js=\"stig_settings.js\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\nfirefox_pref=\"/defaults/pref\"\nfirefox_preferences=\"/defaults/preferences\"\n\n#
      Check the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Different versions of Firefox have
      different preferences directories, check for them and set the right one\n        if
      [ -d \"${firefox_dir}/${firefox_pref}\" ] ; then\n            firefox_pref_dir=\"${firefox_dir}/${firefox_pref}\"\n        elif
      [ -d \"${firefox_dir}/${firefox_preferences}\" ] ; then\n            firefox_pref_dir=\"${firefox_dir}/${firefox_preferences}\"\n        else\n            mkdir
      -m 755 -p \"${firefox_dir}/${firefox_preferences}\"\n            firefox_pref_dir=\"${firefox_dir}/${firefox_preferences}\"\n        fi\n\n        #
      Make sure the Firefox .js file exists and has the appropriate permissions\n        if
      ! [ -f \"${firefox_pref_dir}/${firefox_js}\" ] ; then\n            touch \"${firefox_pref_dir}/${firefox_js}\"\n            chmod
      644 \"${firefox_pref_dir}/${firefox_js}\"\n        fi\n\n        # If the key
      exists, change it. Otherwise, add it to the config_file.\n        if LC_ALL=C
      grep -m 1 -q ''^pref(\"general.config.obscure_value\", '' \"${firefox_pref_dir}/${firefox_js}\";
      then\n            sed -i ''s/pref(\"general.config.obscure_value\".*/pref(\"general.config.obscure_value\",
      ''\"$value)\"'';/g'' \"${firefox_pref_dir}/${firefox_js}\"\n        else\n            echo
      ''pref(\"general.config.obscure_value\", ''\"$value\"'');'' &gt;&gt; \"${firefox_pref_dir}/${firefox_js}\"\n        fi\n    fi\ndone\n</ns9:fix>\n            <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-lock_settings_obscure:def:1\"/>\n            </ns9:check>\n            <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-lock_settings_obscure_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n        </ns9:Group>\n        <ns9:Group
      id=\"xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate\">\n          <ns9:title
      xml:lang=\"en-US\">The DoD Root Certificate Is Required</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">The Shared System Certificates store contains certificates
      that\napplications can access for a single certificate repository.\nIf enabled,
      Firefox can access that single system certificate\nrepository. If the DoD root
      certificate is also installed into\nthe shared system certificate repository,
      Firefox will see and \nuse the DoD root certificate as a valid certificate authority.</ns9:description>\n          <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust\"
      selected=\"false\" severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">Enable
      Shared System Certificates</ns9:title>\n            <ns9:description xml:lang=\"en-US\">The
      Shared System Certificates store makes NSS, GnuTLS, OpenSSL, and Java\nshare
      a default source for retrieving system certificate anchors and blacklist\ninformation.
      Firefox has the capability of using this centralized store for its\nCA certificates.
      If the Shared System Certificates store is disabled, it can\nbe enabled by running
      the following command:\n<html:pre>$ sudo update-ca-trust enable</html:pre></ns9:description>\n            <ns9:reference
      href=\"https://public.cyber.mil/stigs/cci/\">CCI-000054</ns9:reference>\n            <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">AC-10</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">The DOD root certificate will ensure that the trust chain
      is\nestablished for server certificates issued from the DOD CA.</ns9:rationale>\n            <ns9:ident
      system=\"https://nvd.nist.gov/cce/index.cfm\">CCE-82057-1</ns9:ident>\n            <ns9:fix
      id=\"firefox_preferences-enable_ca_trust\" system=\"urn:xccdf:fix:script:sh\">P11=$(readlink
      /etc/alternatives/libnssckbi.so*)\nP11LIB=\"/usr/lib/pkcs11/p11-kit-trust.so\"\nP11LIB64=\"/usr/lib64/pkcs11/p11-kit-trust.so\"\n\nif
      ! [[ ${P11} == \"${P11LIB64}\" ]] || ! [[ ${P11} == \"${P11LIB}\" ]] ; then\n   /usr/bin/update-ca-trust
      enable\nfi\n</ns9:fix>\n            <ns9:check system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n          <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed\"
      selected=\"false\" severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">The
      DoD Root Certificate Exists</ns9:title>\n            <ns9:description xml:lang=\"en-US\">The
      DoD root certificate should be installed in the Shared System Certificates store\nfor
      Firefox to be able to access the DoD certificate. To install the root certificated\ninto
      the Shared System Certificates store, copy the DoD root certificate into\n<html:code>/etc/pki/ca-trust/source/anchors</html:code>.
      Once the file is copied, run the following\ncommand:\n<html:pre>$ sudo update-ca-trust
      extract</html:pre></ns9:description>\n            <ns9:reference href=\"https://public.cyber.mil/stigs/cci/\">CCI-000054</ns9:reference>\n            <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">AC-10</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">The DOD root certificate will ensure that the trust chain
      is\nestablished for server certificates issued from the DOD CA.</ns9:rationale>\n            <ns9:ident
      system=\"https://nvd.nist.gov/cce/index.cfm\">CCE-82056-3</ns9:ident>\n            <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n        </ns9:Group>\n        <ns9:Group
      id=\"xccdf_org.ssgproject.content_group_firefox_preferences-cookies\">\n          <ns9:title
      xml:lang=\"en-US\">Clearing Cookies And Other Data</ns9:title>\n          <ns9:description
      xml:lang=\"en-US\">Browser preferences should be set to perform a Clear Private
      Data\noperation when closing the browser in order to clear cookies and other\ndata
      installed by websites visited during the session.</ns9:description>\n          <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_clear\" selected=\"false\"
      severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">Clear Data When
      Firefox Closes</ns9:title>\n            <ns9:description xml:lang=\"en-US\">When
      a user browses to a website, cookies and other types of data\nget stored on
      the system. This can be disabled by setting\n<html:code>privacy.sanitize.sanitizeOnShutdown</html:code>
      to <html:code>true</html:code>.</ns9:description>\n            <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n            <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF170</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">Cookies can help websites perform better but can also be
      part of spyware.\nTo mitigate this risk, set browser preferences to perform
      a Clear Private\nData operation when closing the browser in order to clear cookies
      and\nother data installed by websites visited during the session.</ns9:rationale>\n            <ns9:fix
      id=\"firefox_preferences-cookies_clear\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"true\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"privacy.sanitize.sanitizeOnShutdown\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"privacy.sanitize.sanitizeOnShutdown\".*/lockPref(\"privacy.sanitize.sanitizeOnShutdown\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"privacy.sanitize.sanitizeOnShutdown\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n            <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-cookies_clear:def:1\"/>\n            </ns9:check>\n            <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-cookies_clear_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n          <ns9:Rule
      id=\"xccdf_org.ssgproject.content_rule_firefox_preferences-cookies_user_notice\"
      selected=\"false\" severity=\"medium\">\n            <ns9:title xml:lang=\"en-US\">Disable
      User Prompt When Data Is Cleared</ns9:title>\n            <ns9:description xml:lang=\"en-US\">By
      default, users are asked if it is okay to clear out cookies and data\nwhen Firefox
      closes. This can be disabled by \nsetting <html:code>privacy.sanitize.promptOnSanitize</html:code>
      to <html:code>false</html:code>.</ns9:description>\n            <ns9:reference
      href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf\">ECSC-1</ns9:reference>\n            <ns9:reference
      href=\"https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance\">FIREFOX-DTBF170</ns9:reference>\n            <ns9:rationale
      xml:lang=\"en-US\">Cookies can help websites perform better but can also be
      part of spyware.\nTo mitigate this risk, set browser preferences to perform
      a Clear Private\nData operation when closing the browser in order to clear cookies
      and\nother data installed by websites visited during the session.</ns9:rationale>\n            <ns9:fix
      id=\"firefox_preferences-cookies_user_notice\" system=\"urn:xccdf:fix:script:sh\">\n\nfirefox_cfg=\"stig.cfg\"\nvalue=\"false\"\nfirefox_dirs=\"/usr/lib/firefox
      /usr/lib64/firefox /usr/local/lib/firefox /usr/local/lib64/firefox\"\n\n# Check
      the possible Firefox install directories\nfor firefox_dir in ${firefox_dirs};
      do\n    # If the Firefox directory exists, then Firefox is installed\n    if
      [ -d \"${firefox_dir}\" ]; then\n        # Make sure the Firefox .cfg file exists
      and has the appropriate permissions\n        if ! [ -f \"${firefox_dir}/${firefox_cfg}\"
      ] ; then\n            touch \"${firefox_dir}/${firefox_cfg}\"\n            chmod
      644 \"${firefox_dir}/${firefox_cfg}\"\n        fi\n\n        # If the key exists,
      change it. Otherwise, add it to the config_file.\n        if LC_ALL=C grep -m
      1 -q ''^lockPref(\"privacy.sanitize.promptOnSanitize\", '' \"${firefox_dir}/${firefox_cfg}\";
      then\n            sed -i ''s/lockPref(\"privacy.sanitize.promptOnSanitize\".*/lockPref(\"privacy.sanitize.promptOnSanitize\",
      ''\"$value)\"'';/g'' \"${firefox_dir}/${firefox_cfg}\"\n        else\n            echo
      ''lockPref(\"privacy.sanitize.promptOnSanitize\", ''\"$value\"'');'' &gt;&gt;
      \"${firefox_dir}/${firefox_cfg}\"\n        fi\n    fi\ndone\n</ns9:fix>\n            <ns9:check
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-oval.xml\" name=\"oval:ssg-firefox_preferences-cookies_user_notice:def:1\"/>\n            </ns9:check>\n            <ns9:check
      system=\"http://scap.nist.gov/schema/ocil/2\">\n              <ns9:check-content-ref
      href=\"ssg-firefox-ocil.xml\" name=\"ocil:ssg-firefox_preferences-cookies_user_notice_ocil:questionnaire:1\"/>\n            </ns9:check>\n          </ns9:Rule>\n        </ns9:Group>\n      </ns9:Group>\n    </ns9:Benchmark>\n  </ns0:component>\n  <ns0:component
      id=\"scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml\" timestamp=\"2020-01-16T13:51:05\">\n    <ns3:oval_definitions
      xsi:schemaLocation=\"http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5
      oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent
      independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix
      unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux
      linux-definitions-schema.xsd\">\n      <ns3:generator>\n        <ns5:product_name>combine_ovals.py
      from SCAP Security Guide</ns5:product_name>\n        <ns5:product_version>ssg:
      [0, 1, 48], python: 3.7.6</ns5:product_version>\n        <ns5:schema_version>5.11</ns5:schema_version>\n        <ns5:timestamp>2020-01-16T13:51:04</ns5:timestamp>\n      </ns3:generator>\n      <ns3:definitions>\n        <ns3:definition
      class=\"inventory\" id=\"oval:ssg-installed_app_is_firefox:def:1\" version=\"2\">\n          <ns3:metadata>\n            <ns3:title>Mozilla
      Firefox</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:reference
      ref_id=\"cpe:/a:mozilla:firefox\" source=\"CPE\"/>\n            <ns3:description>The
      application installed on the system is firefox.</ns3:description>\n          </ns3:metadata>\n          <ns3:criteria
      operator=\"AND\">\n            <ns3:extend_definition comment=\"Installed OS
      is part of the Unix family\" definition_ref=\"oval:ssg-installed_OS_is_part_of_Unix_family:def:1\"/>\n            <ns3:criterion
      comment=\"Firefox is installed\" test_ref=\"oval:ssg-test_firefox:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n        <ns3:definition
      class=\"inventory\" id=\"oval:ssg-installed_OS_is_part_of_Unix_family:def:1\"
      version=\"1\">\n          <ns3:metadata>\n            <ns3:title>Installed operating
      system is part of the Unix family</ns3:title>\n            <ns3:affected family=\"unix\">\n              <ns3:product>Firefox</ns3:product>\n            </ns3:affected>\n            <ns3:description>The
      operating system installed on the system is part of the Unix OS family</ns3:description>\n          </ns3:metadata>\n          <ns3:criteria>\n            <ns3:criterion
      comment=\"Installed operating system is part of the unix family\" test_ref=\"oval:ssg-test_unix_family:tst:1\"/>\n          </ns3:criteria>\n        </ns3:definition>\n      </ns3:definitions>\n      <ns3:tests>\n        <ns7:rpminfo_test
      check=\"all\" check_existence=\"at_least_one_exists\" comment=\"Firefox is installed\"
      id=\"oval:ssg-test_firefox:tst:1\" version=\"1\">\n          <ns7:object object_ref=\"oval:ssg-obj_firefox:obj:1\"/>\n        </ns7:rpminfo_test>\n        <ns6:family_test
      check=\"all\" check_existence=\"at_least_one_exists\" comment=\"Test installed
      OS is part of the unix family\" id=\"oval:ssg-test_unix_family:tst:1\" version=\"1\">\n          <ns6:object
      object_ref=\"oval:ssg-object_unix_family:obj:1\"/>\n          <ns6:state state_ref=\"oval:ssg-state_unix_family:ste:1\"/>\n        </ns6:family_test>\n      </ns3:tests>\n      <ns3:objects>\n        <ns7:rpminfo_object
      id=\"oval:ssg-obj_firefox:obj:1\" version=\"1\">\n          <ns7:name>firefox</ns7:name>\n        </ns7:rpminfo_object>\n        <ns6:family_object
      id=\"oval:ssg-object_unix_family:obj:1\" version=\"1\"/>\n      </ns3:objects>\n      <ns3:states>\n        <ns6:family_state
      id=\"oval:ssg-state_unix_family:ste:1\" version=\"1\">\n          <ns6:family>unix</ns6:family>\n        </ns6:family_state>\n      </ns3:states>\n    </ns3:oval_definitions>\n  </ns0:component>\n  <ns0:component
      id=\"scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml\" timestamp=\"2020-01-16T13:51:05\">\n    <ns12:cpe-list
      xsi:schemaLocation=\"http://cpe.mitre.org/dictionary/2.0 http://cpe.mitre.org/files/cpe-dictionary_2.1.xsd\">\n      <ns12:cpe-item
      name=\"cpe:/a:mozilla:firefox\">\n        <ns12:title xml:lang=\"en-us\">Mozilla
      Firefox</ns12:title>\n        <ns12:check href=\"ssg-firefox-cpe-oval.xml\"
      system=\"http://oval.mitre.org/XMLSchema/oval-definitions-5\">oval:ssg-installed_app_is_firefox:def:1</ns12:check>\n      </ns12:cpe-item>\n    </ns12:cpe-list>\n  </ns0:component>\n</ns0:data-stream-collection>\n",
      "original_filename": "scap_file_name.xml", "location_ids": [25], "organization_ids":
      [24]}}'
    headers:
      Accept:
      - application/json;version=2
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '254344'
      Content-Type:
      - application/json
      Cookie:
      - _session_id=3bb21a1b30f0e62d07372c2f592427b3
      User-Agent:
      - apypie (https://github.com/Apipie/apypie)
    method: POST
    uri: https://foreman.example.org/api/compliance/scap_contents
  response:
    body:
      string: '{"created_at":"2020-03-25 14:40:43 UTC","updated_at":"2020-03-25 14:40:43
        UTC","id":24,"title":"scap_content_title","original_filename":"scap_file_name.xml","digest":"bc76d5413e77e8d65946e720a7c56ae5df0f1a859c52895c132d31dddce15344","organizations":[{"id":24,"name":"Test
        Organization","title":"Test Organization"}],"locations":[{"id":25,"name":"Test
        Location","title":"Test Location"}]}'
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Connection:
      - Keep-Alive
      Content-Security-Policy:
      - 'default-src ''self''; child-src ''self''; connect-src ''self'' ws: wss:;
        img-src ''self'' data: *.gravatar.com; script-src ''unsafe-eval'' ''unsafe-inline''
        ''self''; style-src ''unsafe-inline'' ''self'''
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 25 Mar 2020 14:40:42 GMT
      ETag:
      - W/"a4ed3196b47a977a62b59cd94e506f9f"
      Foreman_api_version:
      - '2'
      Foreman_current_location:
      - ; ANY
      Foreman_current_organization:
      - ; ANY
      Foreman_version:
      - 1.24.2
      Keep-Alive:
      - timeout=5, max=9995
      Server:
      - Apache
      Set-Cookie:
      - request_method=POST; path=/; secure; HttpOnly; SameSite=Lax
      Status:
      - 201 Created
      Strict-Transport-Security:
      - max-age=631139040; includeSubdomains
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - sameorigin
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Powered-By:
      - Phusion Passenger 4.0.53
      X-Request-Id:
      - 89271733-e27e-4a61-8686-5d28033fe0b7
      X-Runtime:
      - '1.866514'
      X-XSS-Protection:
      - 1; mode=block
    status:
      code: 201
      message: Created
version: 1
